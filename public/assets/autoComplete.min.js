var e, t;
(e = this),
	(t = function () {
		'use strict';
		function e(e, t) {
			var n = Object.keys(e);
			if (Object.getOwnPropertySymbols) {
				var r = Object.getOwnPropertySymbols(e);
				t &&
					(r = r.filter(function (t) {
						return Object.getOwnPropertyDescriptor(e, t).enumerable;
					})),
					n.push.apply(n, r);
			}
			return n;
		}
		function t(t) {
			for (var n = 1; n < arguments.length; n++) {
				var i = null != arguments[n] ? arguments[n] : {};
				n % 2
					? e(Object(i), !0).forEach(function (e) {
							r(t, e, i[e]);
					  })
					: Object.getOwnPropertyDescriptors
					? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i))
					: e(Object(i)).forEach(function (e) {
							Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e));
					  });
			}
			return t;
		}
		function n(e) {
			return (
				(n =
					'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
						? function (e) {
								return typeof e;
						  }
						: function (e) {
								return e && 'function' == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype
									? 'symbol'
									: typeof e;
						  }),
				n(e)
			);
		}
		function r(e, t, n) {
			return (
				t in e ? Object.defineProperty(e, t, {value: n, enumerable: !0, configurable: !0, writable: !0}) : (e[t] = n), e
			);
		}
		function i(e) {
			return (
				(function (e) {
					if (Array.isArray(e)) return s(e);
				})(e) ||
				(function (e) {
					if (('undefined' != typeof Symbol && null != e[Symbol.iterator]) || null != e['@@iterator'])
						return Array.from(e);
				})(e) ||
				o(e) ||
				(function () {
					throw new TypeError(
						'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
					);
				})()
			);
		}
		function o(e, t) {
			if (e) {
				if ('string' == typeof e) return s(e, t);
				var n = Object.prototype.toString.call(e).slice(8, -1);
				return (
					'Object' === n && e.constructor && (n = e.constructor.name),
					'Map' === n || 'Set' === n
						? Array.from(e)
						: 'Arguments' === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
						? s(e, t)
						: void 0
				);
			}
		}
		function s(e, t) {
			(null == t || t > e.length) && (t = e.length);
			for (var n = 0, r = new Array(t); n < t; n++) r[n] = e[n];
			return r;
		}
		var u = function (e) {
				return 'string' == typeof e ? document.querySelector(e) : e();
			},
			a = function (e, t) {
				var n = 'string' == typeof e ? document.createElement(e) : e;
				for (var r in t) {
					var i = t[r];
					if ('inside' === r) i.append(n);
					else if ('dest' === r) u(i[0]).insertAdjacentElement(i[1], n);
					else if ('around' === r) {
						var o = i;
						o.parentNode.insertBefore(n, o), n.append(o), null != o.getAttribute('autofocus') && o.focus();
					} else r in n ? (n[r] = i) : n.setAttribute(r, i);
				}
				return n;
			},
			c = function (e, t) {
				return (
					(e = String(e).toLowerCase()),
					t
						? e
								.normalize('NFD')
								.replace(/[\u0300-\u036f]/g, '')
								.normalize('NFC')
						: e
				);
			},
			l = function (e, n) {
				return a('mark', t({innerHTML: e}, 'string' == typeof n && {class: n})).outerHTML;
			},
			f = function (e, t) {
				t.input.dispatchEvent(new CustomEvent(e, {bubbles: !0, detail: t.feedback, cancelable: !0}));
			},
			p = function (e, t, n) {
				var r = n || {},
					i = r.mode,
					o = r.diacritics,
					s = r.highlight,
					u = c(t, o);
				if (((t = String(t)), (e = c(e, o)), 'loose' === i)) {
					var a = (e = e.replace(/ /g, '')).length,
						f = 0,
						p = Array.from(t)
							.map(function (t, n) {
								return f < a && u[n] === e[f] && ((t = s ? l(t, s) : t), f++), t;
							})
							.join('');
					if (f === a) return p;
				} else {
					var d = u.indexOf(e);
					if (~d) return (e = t.substring(d, d + e.length)), (d = s ? t.replace(e, l(e, s)) : t);
				}
			},
			d = function (e, t) {
				return new Promise(function (n, r) {
					var i;
					return (i = e.data).cache && i.store
						? n()
						: new Promise(function (e, n) {
								return 'function' == typeof i.src ? i.src(t).then(e, n) : e(i.src);
						  }).then(function (t) {
								try {
									return (e.feedback = i.store = t), f('response', e), n();
								} catch (e) {
									return r(e);
								}
						  }, r);
				});
			},
			h = function (e, t) {
				var n = t.data,
					r = t.searchEngine,
					i = [];
				n.store.forEach(function (s, u) {
					var a = function (n) {
						var o = n ? s[n] : s,
							u =
								'function' == typeof r
									? r(e, o)
									: p(e, o, {mode: r, diacritics: t.diacritics, highlight: t.resultItem.highlight});
						if (u) {
							var a = {match: u, value: s};
							n && (a.key = n), i.push(a);
						}
					};
					if (n.keys) {
						var c,
							l = (function (e, t) {
								var n = ('undefined' != typeof Symbol && e[Symbol.iterator]) || e['@@iterator'];
								if (!n) {
									if (Array.isArray(e) || (n = o(e)) || (t && e && 'number' == typeof e.length)) {
										n && (e = n);
										var r = 0,
											i = function () {};
										return {
											s: i,
											n: function () {
												return r >= e.length ? {done: !0} : {done: !1, value: e[r++]};
											},
											e: function (e) {
												throw e;
											},
											f: i
										};
									}
									throw new TypeError(
										'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
									);
								}
								var s,
									u = !0,
									a = !1;
								return {
									s: function () {
										n = n.call(e);
									},
									n: function () {
										var e = n.next();
										return (u = e.done), e;
									},
									e: function (e) {
										(a = !0), (s = e);
									},
									f: function () {
										try {
											u || null == n.return || n.return();
										} finally {
											if (a) throw s;
										}
									}
								};
							})(n.keys);
						try {
							for (l.s(); !(c = l.n()).done; ) a(c.value);
						} catch (e) {
							l.e(e);
						} finally {
							l.f();
						}
					} else a();
				}),
					n.filter && (i = n.filter(i));
				var s = i.slice(0, t.resultsList.maxResults);
				(t.feedback = {query: e, matches: i, results: s}), f('results', t);
			},
			m = 'aria-expanded',
			b = 'aria-activedescendant',
			y = 'aria-selected',
			v = function (e, n) {
				e.feedback.selection = t({index: n}, e.feedback.results[n]);
			},
			g = function (e) {
				e.isOpen ||
					((e.wrapper || e.input).setAttribute(m, !0), e.list.removeAttribute('hidden'), (e.isOpen = !0), f('open', e));
			},
			w = function (e) {
				e.isOpen &&
					((e.wrapper || e.input).setAttribute(m, !1),
					e.input.setAttribute(b, ''),
					e.list.setAttribute('hidden', ''),
					(e.isOpen = !1),
					f('close', e));
			},
			O = function (e, t) {
				var n = t.resultItem,
					r = t.list.getElementsByTagName(n.tag),
					o = !!n.selected && n.selected.split(' ');
				if (t.isOpen && r.length) {
					var s,
						u,
						a = t.cursor;
					e >= r.length && (e = 0),
						e < 0 && (e = r.length - 1),
						(t.cursor = e),
						a > -1 && (r[a].removeAttribute(y), o && (u = r[a].classList).remove.apply(u, i(o))),
						r[e].setAttribute(y, !0),
						o && (s = r[e].classList).add.apply(s, i(o)),
						t.input.setAttribute(b, r[t.cursor].id),
						(t.list.scrollTop = r[e].offsetTop - t.list.clientHeight + r[e].clientHeight + 5),
						(t.feedback.cursor = t.cursor),
						v(t, e),
						f('navigate', t);
				}
			},
			A = function (e) {
				O(e.cursor + 1, e);
			},
			k = function (e) {
				O(e.cursor - 1, e);
			},
			L = function (e, t, n) {
				(n = n >= 0 ? n : e.cursor) < 0 || ((e.feedback.event = t), v(e, n), f('selection', e), w(e));
			};
		function j(e, n) {
			var r = this;
			return new Promise(function (i, o) {
				var s, u;
				return (
					(s =
						n ||
						((u = e.input) instanceof HTMLInputElement || u instanceof HTMLTextAreaElement ? u.value : u.innerHTML)),
					(function (e, t, n) {
						return t ? t(e) : e.length >= n;
					})((s = e.query ? e.query(s) : s), e.trigger, e.threshold)
						? d(e, s).then(function (n) {
								try {
									return e.feedback instanceof Error
										? i()
										: (h(s, e),
										  e.resultsList &&
												(function (e) {
													var n = e.resultsList,
														r = e.list,
														i = e.resultItem,
														o = e.feedback,
														s = o.matches,
														u = o.results;
													if (((e.cursor = -1), (r.innerHTML = ''), s.length || n.noResults)) {
														var c = new DocumentFragment();
														u.forEach(function (e, n) {
															var r = a(
																i.tag,
																t(
																	{id: ''.concat(i.id, '_').concat(n), role: 'option', innerHTML: e.match, inside: c},
																	i.class && {class: i.class}
																)
															);
															i.element && i.element(r, e);
														}),
															r.append(c),
															n.element && n.element(r, o),
															g(e);
													} else w(e);
												})(e),
										  c.call(r));
								} catch (e) {
									return o(e);
								}
						  }, o)
						: (w(e), c.call(r))
				);
				function c() {
					return i();
				}
			});
		}
		var S = function (e, t) {
				for (var n in e) for (var r in e[n]) t(n, r);
			},
			T = function (e) {
				var n,
					r,
					i,
					o = e.events,
					s =
						((n = function () {
							return j(e);
						}),
						(r = e.debounce),
						function () {
							clearTimeout(i),
								(i = setTimeout(function () {
									return n();
								}, r));
						}),
					u = (e.events = t({input: t({}, o && o.input)}, e.resultsList && {list: o ? t({}, o.list) : {}})),
					a = {
						input: {
							input: function () {
								s();
							},
							keydown: function (t) {
								!(function (e, t) {
									switch (e.keyCode) {
										case 40:
										case 38:
											e.preventDefault(), 40 === e.keyCode ? A(t) : k(t);
											break;
										case 13:
											t.submit || e.preventDefault(), t.cursor >= 0 && L(t, e);
											break;
										case 9:
											t.resultsList.tabSelect && t.cursor >= 0 && L(t, e);
											break;
										case 27:
											(t.input.value = ''), w(t);
									}
								})(t, e);
							},
							blur: function () {
								w(e);
							}
						},
						list: {
							mousedown: function (e) {
								e.preventDefault();
							},
							click: function (t) {
								!(function (e, t) {
									var n = t.resultItem.tag.toUpperCase(),
										r = Array.from(t.list.querySelectorAll(n)),
										i = e.target.closest(n);
									i && i.nodeName === n && L(t, e, r.indexOf(i));
								})(t, e);
							}
						}
					};
				S(a, function (t, n) {
					(e.resultsList || 'input' === n) && (u[t][n] || (u[t][n] = a[t][n]));
				}),
					S(u, function (t, n) {
						e[t].addEventListener(n, u[t][n]);
					});
			};
		function E(e) {
			var n = this;
			return new Promise(function (r, i) {
				var o, s, u;
				if (
					((o = e.placeHolder),
					(u = {role: 'combobox', 'aria-owns': (s = e.resultsList).id, 'aria-haspopup': !0, 'aria-expanded': !1}),
					a(
						e.input,
						t(t({'aria-controls': s.id, 'aria-autocomplete': 'both'}, o && {placeholder: o}), !e.wrapper && t({}, u))
					),
					e.wrapper && (e.wrapper = a('div', t({around: e.input, class: e.name + '_wrapper'}, u))),
					s &&
						(e.list = a(
							s.tag,
							t(
								{dest: [s.destination, s.position], id: s.id, role: 'listbox', hidden: 'hidden'},
								s.class && {class: s.class}
							)
						)),
					T(e),
					e.data.cache)
				)
					return d(e).then(function (e) {
						try {
							return c.call(n);
						} catch (e) {
							return i(e);
						}
					}, i);
				function c() {
					return f('init', e), r();
				}
				return c.call(n);
			});
		}
		function x(e) {
			var t = e.prototype;
			(t.init = function () {
				E(this);
			}),
				(t.start = function (e) {
					j(this, e);
				}),
				(t.unInit = function () {
					if (this.wrapper) {
						var e = this.wrapper.parentNode;
						e.insertBefore(this.input, this.wrapper), e.removeChild(this.wrapper);
					}
					var t;
					S((t = this).events, function (e, n) {
						t[e].removeEventListener(n, t.events[e][n]);
					});
				}),
				(t.open = function () {
					g(this);
				}),
				(t.close = function () {
					w(this);
				}),
				(t.goTo = function (e) {
					O(e, this);
				}),
				(t.next = function () {
					A(this);
				}),
				(t.previous = function () {
					k(this);
				}),
				(t.select = function (e) {
					L(this, null, e);
				}),
				(t.search = function (e, t, n) {
					return p(e, t, n);
				});
		}
		return function e(t) {
			(this.options = t),
				(this.id = e.instances = (e.instances || 0) + 1),
				(this.name = 'autoComplete'),
				(this.wrapper = 1),
				(this.threshold = 1),
				(this.debounce = 0),
				(this.resultsList = {position: 'afterend', tag: 'ul', maxResults: 5}),
				(this.resultItem = {tag: 'li'}),
				(function (e) {
					var t = e.name,
						r = e.options,
						i = e.resultsList,
						o = e.resultItem;
					for (var s in r)
						if ('object' === n(r[s])) for (var a in (e[s] || (e[s] = {}), r[s])) e[s][a] = r[s][a];
						else e[s] = r[s];
					(e.selector = e.selector || '#' + t),
						(i.destination = i.destination || e.selector),
						(i.id = i.id || t + '_list_' + e.id),
						(o.id = o.id || t + '_result'),
						(e.input = u(e.selector));
				})(this),
				x.call(this, e),
				E(this);
		};
	}),
	'object' == typeof exports && 'undefined' != typeof module
		? (module.exports = t())
		: 'function' == typeof define && define.amd
		? define(t)
		: ((e = 'undefined' != typeof globalThis ? globalThis : e || self).autoComplete = t());
('use strict');
const lines = {
	bakerloo: {
		branch: false,
		line: 'bakerloo',
		stations: [
			'HAW',
			'KNT',
			'SKT',
			'NWM',
			'WEM',
			'SPK',
			'HSD',
			'WJN',
			'KGN',
			'QPK',
			'KPK',
			'MDV',
			'WAR',
			'PAD',
			'ERB',
			'MYB',
			'BST',
			'RPK',
			'OXC',
			'PIC',
			'CHX',
			'EMB',
			'WLO',
			'LAM',
			'ELE'
		]
	},
	central: {
		branch: true,
		line: 'central',
		top: [
			['WRP', 'RUG', 'SRP', 'NHT', 'GFD', 'PER', 'HLN', 'NAC'],
			['EBY', 'WAC', 'NAC']
		],
		bottom: [
			[
				'NAC',
				'EAC',
				'WCT',
				'SHB',
				'HPK',
				'NHG',
				'QWY',
				'LAN',
				'MAR',
				'BDS',
				'OXC',
				'TCR',
				'HOL',
				'CYL',
				'STP',
				'BNK',
				'LST',
				'BNG',
				'MLE',
				'SFD',
				'LEY',
				'LYS'
			],
			[
				'NAC',
				'EAC',
				'WCT',
				'SHB',
				'HPK',
				'NHG',
				'QWY',
				'LAN',
				'MAR',
				'BDS',
				'OXC',
				'TCR',
				'HOL',
				'CYL',
				'STP',
				'BNK',
				'LST',
				'BNG',
				'MLE',
				'SFD',
				'LEY',
				'LYS',
				'SNB',
				'SWF',
				'WFD',
				'BHL',
				'LTN',
				'DEB',
				'THB',
				'EPP'
			],
			[
				'NAC',
				'EAC',
				'WCT',
				'SHB',
				'HPK',
				'NHG',
				'QWY',
				'LAN',
				'MAR',
				'BDS',
				'OXC',
				'TCR',
				'HOL',
				'CYL',
				'STP',
				'BNK',
				'LST',
				'BNG',
				'MLE',
				'SFD',
				'LEY',
				'LYS',
				'WSD',
				'RED',
				'GHL',
				'NEP',
				'BDE',
				'FLP',
				'HAI',
				'GRH',
				'CHG',
				'ROD',
				'WFD'
			]
		]
	},
	piccadilly: {
		branch: 'true',
		line: 'piccadilly',
		top: [
			[
				'CFS',
				'OAK',
				'SGT',
				'AGR',
				'BGR',
				'WGN',
				'TPL',
				'TPL',
				'MNR',
				'FPK',
				'ARL',
				'HRD',
				'CRD',
				'KXX',
				'RSQ',
				'HOL',
				'COV',
				'LSQ',
				'PIC',
				'GPK',
				'HPC',
				'KNB',
				'SKN',
				'GRD',
				'ECT',
				'BCT',
				'HMD',
				'TGR'
			]
		],
		bottom: [
			['TGR', 'ACT', 'ECM', 'NEL', 'PRY', 'ALP', 'STN', 'SHL', 'SHR', 'RLN', 'ETE', 'RUM', 'RUI', 'ICK', 'HDN', 'UXB'],
			['TGR', 'ACT', 'SEL', 'NFD', 'BOS', 'OST', 'HNE', 'HNC', 'HNW', 'HTX', 'HRC', 'HTF', 'HTC'],
			['TGR', 'ACT', 'SEL', 'NFD', 'BOS', 'OST', 'HNE', 'HNC', 'HNW', 'HTX', 'HRC', 'HRV']
		]
	},
	jubilee: {
		branch: false,
		line: 'jubilee',
		stations: [
			'STA',
			'CPK',
			'QBY',
			'KBY',
			'WPK',
			'NEA',
			'DHL',
			'WLG',
			'KIL',
			'WHD',
			'FRD',
			'SWC',
			'SJW',
			'BST',
			'BDS',
			'GPK',
			'WMS',
			'WLO',
			'SWK',
			'LON',
			'BER',
			'CWR',
			'CWF',
			'NGW',
			'CAT',
			'WEH',
			'SFD'
		]
	},
	metropolitan: {
		branch: true,
		line: 'metropolitan',
		top: [
			['AME', 'CLF', 'CWD', 'RKY', 'MPK', 'NWD', 'NWH', 'PIN', 'NHR', 'HOH'],
			['CHE', 'CLF', 'CWD', 'RKY', 'MPK', 'NWD', 'NWH', 'PIN', 'NHR', 'HOH'],
			['WAT', 'CRX', 'MPK', 'NWD', 'NWH', 'PIN', 'NHR', 'HOH'],
			['UXB', 'HDN', 'ICK', 'RUI', 'RUM', 'ETE', 'RLN', 'WHR', 'HOH']
		],
		bottom: [['HOH', 'NWP', 'PRD', 'WPK', 'FRD', 'BST', 'GPS', 'ESQ', 'KXX', 'FAR', 'BAR', 'MGT', 'LST', 'ALD']]
	},
	victoria: {
		branch: false,
		line: 'victoria',
		stations: [
			'WAL',
			'BHR',
			'TTH',
			'SVS',
			'FPK',
			'HBY',
			'KXX',
			'EUS',
			'WST',
			'OXC',
			'GPK',
			'VIC',
			'PIM',
			'VUX',
			'STK',
			'BRX'
		]
	},
	northern: {
		branch: true,
		line: 'northern',
		top: [
			['HBT', 'TOT', 'WSP', 'WFY', 'FYC', 'FYC', 'EFY', 'HIG', 'ARC', 'TPK', 'KTN', 'CTN'],
			['MHE', 'FYC', 'EFY', 'HIG', 'ARC', 'TPK', 'KTN', 'CTN'],
			['EDG', 'BUR', 'COL', 'HND', 'BTX', 'GGR', 'HMP', 'BPK', 'CHF', 'CTN']
		],
		bottom: [
			['CTN', 'MCR', 'EUS', 'WST', 'GST', 'TCR', 'LSQ', 'CHX', 'EMB', 'WLO', 'KEN', 'NIE', 'BAT'],
			[
				'CTN',
				'EUS',
				'KXX',
				'ANG',
				'OLD',
				'MGT',
				'BNK',
				'LON',
				'BOR',
				'ELE',
				'KEN',
				'OVL',
				'STK',
				'CPN',
				'CPC',
				'CPS',
				'BAL',
				'TBE',
				'TBY',
				'CLW',
				'SWM',
				'MOR'
			]
		]
	},
	circle: {
		branch: false,
		line: 'circle',
		stations: [
			'HMS',
			'GOR',
			'SBM',
			'WOL',
			'LAT',
			'LAD',
			'WBP',
			'ROO',
			'PAD',
			'ERD',
			'BST',
			'GPS',
			'ESQ',
			'KXX',
			'FAR',
			'BAR',
			'MGT',
			'LST',
			'ALD',
			'THL',
			'MON',
			'CST',
			'MAN',
			'BLF',
			'TEM',
			'EMB',
			'WMS',
			'SJP',
			'VIC',
			'SSQ',
			'SKN',
			'GRD',
			'HST',
			'NHG',
			'BAY',
			'PAD',
			'ERD',
			'PAD'
		]
	},
	'hammersmith-city': {
		branch: false,
		line: 'hammersmith-city',
		stations: [
			'HMS',
			'GOR',
			'SBM',
			'WOL',
			'LAT',
			'LAD',
			'WBP',
			'ROO',
			'PAD',
			'ERD',
			'BST',
			'GPS',
			'ESQ',
			'KXX',
			'FAR',
			'BAR',
			'MGT',
			'LST',
			'ALE',
			'WCL',
			'STG',
			'MLE',
			'BWR',
			'BBB',
			'WEH',
			'PLW',
			'UPK',
			'EHM',
			'BKG'
		]
	},
	district: {
		branch: true,
		line: 'district',
		top: [
			['EBY', 'ECM', 'ACT', 'CHP', 'TGR', 'STB', 'RCP', 'HMD', 'BCT', 'WKN', 'ECT'],
			['RMD', 'KEW', 'GUN', 'TGR', 'STB', 'RCP', 'HMD', 'BCT', 'WKN', 'ECT'],
			['OLY', 'ECT'],
			['WDN', 'WMP', 'SFS', 'EPY', 'PUT', 'PGR', 'FBY', 'WBT', 'ECT']
		],
		bottom: [
			['ECT', 'HST', 'NHG', 'BAY', 'PAD', 'ERD'],
			[
				'ECT',
				'GRD',
				'SKN',
				'SSQ',
				'VIC',
				'SJP',
				'WMS',
				'EMB',
				'TEM',
				'BLF',
				'MAN',
				'CST',
				'MON',
				'THL',
				'ALE',
				'WCL',
				'STG',
				'MLE',
				'BWR',
				'BBB',
				'WEH',
				'PLW',
				'UPK',
				'EHM',
				'BKG',
				'UPY',
				'BEC',
				'DGH',
				'DGE',
				'EPK',
				'HCH',
				'UPB',
				'UPM'
			]
		]
	},
	'elizabeth-east': {
		branch: true,
		line: 'elizabeth',
		top: [
			['RDG', 'TFD', 'MDH', 'TLW', 'BHM', 'SGH', 'LGY', 'IVR', 'WDT', 'HAH'],
			['HRF', 'HTC', 'HAH'],
			['HTV', 'HTC', 'HAH']
		],
		bottom: [
			['HAH', 'SAL', 'HWL', 'WEL', 'EBY', 'AML', 'PAD'],
			['LST', '']
		]
	},
	'elizabeth-west': {
		branch: false,
		line: 'elizabeth',
		stations: ['LST', 'SFD', 'MLD', 'FGT', 'MNP', 'IFD', 'SVK', 'GDM', 'CWH', 'RFD', 'GDP', 'HWD', 'BWD', 'SND']
	},
	'overground_WTJ-EUS': {
		branch: false,
		line: 'overground',
		stations: [
			'WTJ',
			'WFH',
			'BSH',
			'CEP',
			'HTE',
			'HDL',
			'HAW',
			'KNT',
			'SKT',
			'NWM',
			'WEM',
			'SPK',
			'HSD',
			'WJN',
			'KGN',
			'QPK',
			'KBN',
			'SOH',
			'EUS'
		]
	},
	'overground_GPO-BKG': {
		branch: false,
		line: 'overground',
		stations: ['GPO', 'UHL', 'CRH', 'HRY', 'STO', 'BHR', 'WMW', 'LEM', 'LER', 'WNP', 'WGR', 'BKG']
	},
	overground_HBY: {
		branch: true,
		line: 'overground',
		top: [['HBY', 'CNN', 'DLJ', 'HGG', 'HOX', 'SDC', 'WCL', 'SHA', 'WPE', 'ROE', 'CWR', 'SUQ']],
		bottom: [
			['SUQ', 'NWX'],
			['SUQ', 'NXG', 'BCY', 'HPA', 'FOH', 'SYD', 'CRP'],
			['SUQ', 'NXG', 'BCY', 'HPA', 'FOH', 'SYD', 'PNW', 'ANZ', 'NJN', 'WCY'],
			['SUQ', 'NXG', 'BCY', 'HPA', 'FOH', 'SYD', 'QRP', 'PMR', 'DMH', 'CHS', 'WWR', 'CLH']
		]
	},
	overground_LST: {
		branch: true,
		line: 'overground',
		top: [
			['HKD', 'RRD', 'SNT', 'SFH', 'SVS', 'BRG', 'WHL', 'SST', 'EMG', 'BHP', 'EFT'],
			['HKD', 'RRD', 'SNT', 'SFH', 'SVS', 'BRG', 'WHL', 'SST', 'EMG', 'SBY', 'TST', 'TBG', 'CHT'],
			['HKD', 'CPT', 'SJS', 'WAL', 'WOS', 'HGP', 'CFD']
		],
		bottom: [['LST', 'BNG', 'CBH', 'LFD', 'HKD']]
	},
	overground_SFD: {
		branch: true,
		line: 'overground',
		top: [
			['RMD', 'KEW', 'GUN', 'SAT', 'ACC', 'WJN'],
			['CLJ', 'IMW', 'WBT', 'OLY', 'SHB', 'WJN']
		],
		bottom: [
			[
				'WJN',
				'KNR',
				'BSP',
				'BSY',
				'WHD',
				'FNY',
				'HDH',
				'GPO',
				'KTW',
				'CMD',
				'CIR',
				'HBY',
				'CNN',
				'DLK',
				'HKC',
				'HMN',
				'HKW',
				'SFD'
			]
		]
	},
	overground_UPM: {branch: false, line: 'overground', stations: ['RFD', 'EMP', 'UPM']},
	tram: {
		branch: true,
		line: 'tram',
		top: [
			[
				'WDN',
				'DDN',
				'MRP',
				'MRD',
				'PBR',
				'BGW',
				'MTM',
				'MTJ',
				'BDL',
				'TRL',
				'AMP',
				'WDM',
				'WLP',
				'RVC',
				'CEN',
				'WCY',
				'WLR',
				'ECR',
				'LEB',
				'SAN'
			],
			[
				'WDN',
				'DDN',
				'MRP',
				'MRD',
				'PBR',
				'BGW',
				'MTM',
				'MTJ',
				'BDL',
				'TRL',
				'AMP',
				'WDM',
				'WLP',
				'CCS',
				'GGS',
				'ECR',
				'LEB',
				'SAN'
			]
		],
		bottom: [
			['SAN', 'LPK', 'CLN', 'GVH', 'ADV', 'FLW', 'KHD', 'NAD'],
			['SAN', 'ADS', 'BSL', 'WDS', 'ARN', 'ELM'],
			['SAN', 'ADS', 'BSL', 'WDS', 'ARN', 'HRD', 'BKB', 'AVR', 'BCR', 'BCJ']
		]
	},
	'waterloo-city': {branch: false, line: 'waterloo-city', stations: ['WLO', 'BNK']},
	'cable-car': {branch: false, line: 'cable-car', stations: ['EGP', 'EMD']},
	'dlr_E-W': {
		branch: true,
		line: 'dlr',
		top: [
			['BNK', 'SHA', 'LIM', 'WES'],
			['TOG', 'SHA', 'LIM', 'WES']
		],
		bottom: [
			['WES', 'POP', 'BLA', 'EAI', 'CAT', 'WST', 'PDK', 'LCA', 'KGV', 'WOA'],
			['WES', 'POP', 'BLA', 'EAI', 'CAT', 'ROV', 'CUH', 'PRR', 'ROA', 'BEP', 'CYP', 'GAR', 'BEC'],
			['WES', 'WIQ', 'CWF', 'HEW', 'SOW', 'CRO', 'MUD', 'ISG', 'CUS', 'GRE', 'DEB', 'ELR', 'LEW']
		]
	},
	'dlr_N-S': {
		branch: true,
		line: 'dlr',
		top: [['STI', 'SFD', 'SHS', 'ABR', 'WEH', 'STL', 'CAT']],
		bottom: [
			['CAT', 'WST', 'PDK', 'LCA', 'KGV', 'WOA'],
			['CAT', 'ROV', 'CUH', 'PRR', 'ROA', 'BEP', 'CYP', 'GAR', 'BEC']
		]
	},
	'dlr_SFD-LEW': {
		branch: false,
		line: 'dlr',
		stations: [
			'STI',
			'SFD',
			'PML',
			'DER',
			'LAP',
			'ALS',
			'POP',
			'WIQ',
			'CWF',
			'HEW',
			'SOW',
			'CRO',
			'MUD',
			'ISG',
			'CUS',
			'GRE',
			'DEB',
			'ELR',
			'LEW'
		]
	},
	OSI: {
		branch: false,
		line: 'OSI',
		stations: [
			'HLN',
			'PRY',
			'HMS',
			'HMD',
			'CRD',
			'CIR',
			'CMD',
			'CTN',
			'FRD',
			'FNY',
			'EUS',
			'ESQ',
			'WCT',
			'WOL',
			'SOH',
			'SWC',
			'THL',
			'TOG',
			'ROV',
			'EMD',
			'NGW',
			'EGP',
			'KNT',
			'NWP',
			'STO',
			'SVS',
			'WAL',
			'WMW',
			'HNY',
			'MNR',
			'ARC',
			'UHL',
			'WAN',
			'FGT',
			'CHS',
			'CPN',
			'SWM',
			'MRD',
			'NWX',
			'NXG'
		]
	}
};
const stations = {
	'Abbey Road': 'ABR',
	'Acton Central': 'ACC',
	'Acton Mainline': 'AML',
	'Acton Town': 'ACT',
	Addiscombe: 'ADS',
	'Addington Village': 'ADV',
	Aldgate: 'ALD',
	'Aldgate East': 'ALE',
	'All Saints': 'ALS',
	Alperton: 'ALP',
	Amersham: 'AME',
	'Ampere Way': 'AMP',
	Anerley: 'ANZ',
	Angel: 'ANG',
	Archway: 'ARC',
	Arena: 'ARN',
	'Arnos Grove': 'AGR',
	Arsenal: 'ARL',
	'Avenue Road': 'AVR',
	'Baker Street': 'BST',
	Balham: 'BAL',
	Bank: 'BNK',
	Barbican: 'BAR',
	Barking: 'BKG',
	Barkingside: 'BDE',
	'Barons Court': 'BCT',
	'Battersea Power Station': 'BAT',
	Bayswater: 'BAY',
	'Beckenham Junction': 'BCJ',
	'Beckenham Road': 'BCR',
	Beckton: 'BEC',
	'Beckton Park': 'BEP',
	Becontree: 'BEC',
	'Beddington Lane': 'BDL',
	'Belgrave Walk': 'BGW',
	'Belsize Park': 'BPK',
	Bermondsey: 'BER',
	'Bethnal Green': 'BNG',
	Birkbeck: 'BKB',
	Blackfriars: 'BLF',
	'Blackhorse Road': 'BHR',
	'Blackhorse Lane': 'BSL',
	Blackwall: 'BLA',
	'Bond Street': 'BDS',
	Borough: 'BOR',
	'Boston Manor': 'BOS',
	'Bounds Green': 'BGR',
	'Bow Church': 'BOC',
	'Bow Road': 'BWR',
	'Brent Cross': 'BTX',
	Brixton: 'BRX',
	Brockley: 'BCY',
	'Bromley by Bow': 'BBB',
	Brondesbury: 'BSY',
	'Brondesbury Park': 'BSP',
	Brentwood: 'BWD',
	'Bruce Grove': 'BRG',
	'Buckhurst Hill': 'BHL',
	Burnham: 'BHM',
	'Burnt Oak': 'BUR',
	'Bush Hill Park': 'BHP',
	Bushey: 'BSH',
	'Caledonian Road': 'CRD',
	'Caledonian Road & Barnsbury': 'CIR',
	'Cambridge Heath': 'CBH',
	'Camden Road': 'CMD',
	'Camden Town': 'CTN',
	'Canada Water': 'CWR',
	'Canary Wharf': 'CWF',
	'Canning Town': 'CAT',
	'Cannon Street': 'CST',
	Canonbury: 'CNN',
	'Canons Park': 'CPK',
	'Carpenders Park': 'CEP',
	Centrale: 'CEN',
	'Chadwell Heath': 'CWH',
	'Chalfont & Latimer': 'CLF',
	'Chalk Farm': 'CHF',
	'Chancery Lane': 'CYL',
	'Charing Cross': 'CHX',
	Chesham: 'CHE',
	Chesnut: 'CHT',
	Chigwell: 'CHG',
	Chingford: 'CFD',
	'Chiswick Park': 'CHP',
	Chorleywood: 'CWD',
	'Church Stret': 'CCS',
	'Clapham Common': 'CPC',
	'Clapham High Steet': 'CHS',
	'Clapham Junction': 'CLJ',
	'Clapham North': 'CPN',
	'Clapham South': 'CPS',
	Clapton: 'CPT',
	Cockfosters: 'CFS',
	Colindale: 'COL',
	'Colliers Wood': 'CLW',
	'Coombe Lane': 'CLN',
	'Covent Garden': 'COV',
	Crossharbour: 'CRO',
	'Crouch Hill': 'CRH',
	Croxley: 'CRX',
	'Crystal Palace': 'CRP',
	'Custom House for ExCeL': 'CUH',
	'Cutty Sark for Maritime Greenwich': 'CUS',
	Cyprus: 'CYP',
	'Dagenham East': 'DGE',
	'Dagenham Heathway': 'DGH',
	'Dalston Junction': 'DLJ',
	'Dalston Kingsland': 'DLK',
	Debden: 'DEB',
	'Denmark Hill': 'DMH',
	'Deptford Bridge': 'DEB',
	'Devons Road': 'DER',
	'Dollis Hill': 'DHL',
	'Dundonald Road': 'DDR',
	'Ealing Broadway': 'EBY',
	'Ealing Common': 'ECM',
	"Earl's Court": 'ECT',
	'East Acton': 'EAC',
	'East Croydon': 'ECR',
	'East Finchley': 'EFY',
	'East Ham': 'EHM',
	'East India': 'EAI',
	'East Putney': 'EPY',
	Eastcote: 'ETE',
	Edgware: 'EDG',
	'Edgware Road (Bakerloo line)': 'ERB',
	'Edgware Road (District, Circle, H&C lines)': 'ERD',
	'Edmonton Green': 'EMG',
	'Elephant & Castle': 'ELE',
	'Elmers End': 'ELM',
	'Elm Park': 'EPK',
	'Elverson Road': 'ELR',
	Embankment: 'EMB',
	'Emerson Park': 'EMP',
	'Emirates Greenwich Peninsula': 'EGP',
	'Emirates Royal Docks': 'EMD',
	'Enfield Town': 'EFT',
	Epping: 'EPP',
	Euston: 'EUS',
	'Euston Square': 'ESQ',
	Fairlop: 'FLP',
	Farringdon: 'FAR',
	Fieldway: 'FLW',
	'Finchley Central': 'FYC',
	'Finchley Road': 'FRD',
	'Finchley Road & Frognal': 'FNY',
	'Finsbury Park': 'FPK',
	'Forest Gate': 'FGT',
	'Forest Hill': 'FOH',
	'Fulham Broadway': 'FBY',
	'Gallions Reach': 'GAR',
	'Gants Hill': 'GHL',
	'George Street': 'GGS',
	'Gidea Park': 'GDP',
	'Gloucester Road': 'GRD',
	'Goldhawk Road': 'GOR',
	'Golders Green': 'GGR',
	'Goodge Street': 'GST',
	Goodmayes: 'GDM',
	'Gospel Oak': 'GPO',
	'Grange Hill': 'GRH',
	'Gravel Hill': 'GVH',
	'Great Portland Street': 'GPS',
	'Green Park': 'GPK',
	Greenford: 'GFD',
	Greenwich: 'GRE',
	Gunnersbury: 'GUN',
	'Hackney Central': 'HKC',
	'Hackney Downs': 'HKD',
	'Hackney Wick': 'HKW',
	Haggerston: 'HGG',
	Hainault: 'HAI',
	'Hammersmith (Circle, H&C lines)': 'HMS',
	'Hammersmith (District, Piccadilly lines)': 'HMD',
	Hampstead: 'HMP',
	'Hampstead Heath': 'HDH',
	'Hanger Lane': 'HLN',
	Hanwell: 'HWL',
	Harlesden: 'HSD',
	'Harringay Green Lanes': 'HRY',
	'Harrington Road': 'HRD',
	'Harold Wood': 'HWD',
	'Harrow & Wealdstone': 'HAW',
	'Harrow on the Hill': 'HOH',
	'Hatch End': 'HTE',
	'Hatton Cross': 'HTX',
	'Hayes & Harrlington': 'HAH',
	'Headstone Lane': 'HDL',
	'Heathrow Terminal 4': 'HTF',
	'Heathrow Terminal 5': 'HRV',
	'Heathrow Terminals 123': 'HRC',
	'Hendon Central': 'HND',
	'Heron Quays': 'HEQ',
	'Highams Park': 'HGP',
	'High Barnet': 'HBT',
	'High Street Kensington': 'HST',
	'Highbury & Islington': 'HBY',
	Highgate: 'HIG',
	Hillingdon: 'HDN',
	Holborn: 'HOL',
	'Holland Park': 'HPK',
	'Holloway Road': 'HRD',
	Homerton: 'HMN',
	'Honor Oak Park': 'HPA',
	Hornchurch: 'HCH',
	'Hounslow Central': 'HNC',
	'Hounslow East': 'HNE',
	'Hounslow West': 'HNW',
	Hoxton: 'HOX',
	'Hyde Park Corner': 'HPC',
	Ickenham: 'ICK',
	Ilford: 'IFD',
	'Imperial Wharf': 'IMW',
	'Island Gardens': 'ISG',
	Iver: 'IVR',
	Kennington: 'KEN',
	'Kensal Green': 'KGN',
	'Kensal Rise': 'KNR',
	'Kensington (Olympia)': 'OLY',
	'Kentish Town': 'KTN',
	'Kentish Town West': 'KTW',
	Kenton: 'KNT',
	'Kew Gardens': 'KEW',
	Kilburn: 'KIL',
	'Kilburn Park': 'KPK',
	'Kilburn High Road': 'KBN',
	'King George V': 'KGV',
	'King Henrys Drive': 'KHD',
	'Kings Cross St Pancras': 'KXX',
	'Kings Cross (Met, Circle, H&C lines)': 'KXX',
	'Kings Cross (Piccadilly, Victoria lines)': 'KXX',
	Kingsbury: 'KBY',
	Knightsbridge: 'KNB',
	'Ladbroke Grove': 'LAD',
	'Lambeth North': 'LAM',
	'Lancaster Gate': 'LAN',
	Langley: 'LGY',
	'Langdon Park': 'LAP',
	'Latimer Road': 'LAT',
	'Lebanon Road': 'LEB',
	'Leicester Square': 'LSQ',
	Lewisham: 'LEW',
	Leyton: 'LEY',
	'Leyton Midland Road': 'LEM',
	Leytonstone: 'LYS',
	'Leytonstone High Road': 'LER',
	Limehouse: 'LIM',
	'Liverpool Street': 'LST',
	'Lloyd Park': 'LPK',
	'London Bridge': 'LON',
	'London City Airport': 'LCA',
	'London Fields': 'LFD',
	Loughton: 'LTN',
	'Maida Vale': 'MDV',
	Maidenhead: 'MDH',
	'Manor House': 'MNR',
	'Manor Park': 'MNP',
	'Mansion House': 'MAN',
	'Marble Arch': 'MAR',
	Maryland: 'MLD',
	Marylebone: 'MYB',
	'Merton Park': 'MRP',
	'Mile End': 'MLE',
	'Mill Hill East': 'MHE',
	Mitcham: 'MTM',
	'Mitcham Junction': 'MTJ',
	Monument: 'MON',
	'Moor Park': 'MPK',
	Moorgate: 'MGT',
	Morden: 'MOR',
	'Morden Road': 'MRD',
	'Mornington Crescent': 'MCR',
	Mudchute: 'MUD',
	Neasden: 'NEA',
	'Newbury Park': 'NEP',
	'New Addington': 'NAD',
	'New Cross': 'NWX',
	'New Cross Gate': 'NXG',
	'Nine Elms': 'NIE',
	'North Acton': 'NAC',
	'North Ealing': 'NEL',
	'North Greenwich': 'NGW',
	'North Harrow': 'NHR',
	'North Wembley': 'NWM',
	Northfields: 'NFD',
	Northolt: 'NHT',
	'Northwick Park': 'NWP',
	Northwood: 'NWD',
	'Northwood Hills': 'NWH',
	'Norwood Junction': 'NJN',
	'Notting Hill Gate': 'NHG',
	Oakwood: 'OAK',
	'Old Street': 'OLD',
	Osterley: 'OST',
	Oval: 'OVL',
	'Oxford Circus': 'OXC',
	Paddington: 'PAD',
	'Paddington (Bakerloo, Circle/District and H&C)': 'PAD',
	'Park Royal': 'PRY',
	'Parsons Green': 'PGR',
	'Peckham Rye': 'PMR',
	'Penge West': 'PNW',
	Perivale: 'PER',
	'Phipps Bridge': 'PBR',
	'Piccadilly Circus': 'PIC',
	Pimlico: 'PIM',
	Pinner: 'PIN',
	Plaistow: 'PLW',
	'Pontoon Dock': 'PDK',
	Poplar: 'POP',
	'Preston Road': 'PRD',
	'Prince Regent': 'PRR',
	'Pudding Mill Lane': 'PML',
	'Putney Bridge': 'PUT',
	"Queen's Park": 'QPK',
	"Queen's Road Peckham": 'QRP',
	Queensbury: 'QBY',
	Queensway: 'QWY',
	'Ravenscourt Park': 'RCP',
	'Rayners Lane': 'RLN',
	Reading: 'RDG',
	'Rectory Road': 'RRD',
	Redbridge: 'RED',
	'Reeves Corner': 'RVC',
	"Regent's Park": 'RPK',
	Richmond: 'RMD',
	Rickmansworth: 'RKY',
	'Roding Valley': 'ROD',
	Rotherhithe: 'ROE',
	Romford: 'RFD',
	'Royal Albert': 'ROA',
	'Royal Oak': 'ROO',
	'Royal Victoria': 'ROV',
	Ruislip: 'RUI',
	'Ruislip Gardens': 'RUG',
	'Ruislip Manor': 'RUM',
	'Russell Square': 'RSQ',
	Sandilands: 'SAN',
	'Seven Kings': 'SVK',
	'Seven Sisters': 'SVS',
	Shadwell: 'SHA',
	Shenfield: 'SND',
	"Shepherd's Bush": 'SHB',
	"Shepherd's Bush (Central line)": 'SHB',
	"Shepherd's Bush Market": 'SBM',
	'Shoreditch High Street': 'SDC',
	'Silver Street': 'SST',
	'Sloane Square': 'SSQ',
	Slough: 'SGH',
	Snaresbrook: 'SNB',
	'South Acton': 'SAT',
	'South Ealing': 'SEL',
	'South Harrow': 'SHR',
	'South Hampstead': 'SOH',
	'South Kensington': 'SKN',
	'South Kenton': 'SKT',
	'South Tottenham': 'STO',
	'South Quay': 'SOQ',
	'South Ruislip': 'SRP',
	'South Wimbledon': 'SWM',
	'South Woodford': 'SWF',
	Southall: 'SAL',
	Southbury: 'SBY',
	Southfields: 'SFS',
	Southgate: 'SGT',
	Southwark: 'SWK',
	"St John's Wood": 'SJW',
	"St Paul's": 'STP',
	"St James' Park": 'SJP',
	"St James' Street": 'SJS',
	'Stamford Brook': 'STB',
	'Stamford Hill': 'SFH',
	Stanmore: 'STA',
	'Star Lane': 'STL',
	'Stepney Green': 'STG',
	Stockwell: 'STK',
	'Stoke Newington': 'SNT',
	'Stonebridge Park': 'SPK',
	Stratford: 'SFD',
	'Stratford High Street': 'SHS',
	'Stratford International': 'STI',
	'Sudbury Hill': 'SHL',
	'Sudbury Town': 'STN',
	'Surrey Quays': 'SUQ',
	'Swiss Cottage': 'SWC',
	Sydenham: 'SYD',
	Taplow: 'TLW',
	Temple: 'TEM',
	'Theobalds Grove': 'TBG',
	'Therapia Lane': 'TRL',
	'Theydon Bois': 'THB',
	'Tooting Bec': 'TBE',
	'Tooting Broadway': 'TBY',
	'Tottenham Court Road': 'TCR',
	'Tottenham Hale': 'TTH',
	'Totteridge & Whetstone': 'TOT',
	'Tower Gateway': 'TOG',
	'Tower Hill': 'THL',
	'Tufnell Park': 'TPK',
	'Turkey Street': 'TST',
	'Turnham Green': 'TGR',
	'Turnpike Lane': 'TPL',
	Twyford: 'TFD',
	Upminster: 'UPM',
	'Upminster Bridge': 'UPB',
	Upney: 'UPY',
	'Upper Holloway': 'UHL',
	'Upton Park': 'UPK',
	Uxbridge: 'UXB',
	Vauxhall: 'VUX',
	Victoria: 'VIC',
	'Waddon Marsh': 'WDM',
	'Walthamstow Central': 'WAL',
	"Walthamstow Queen's Road": 'WMW',
	'Wandle Park': 'WLP',
	'Wandsworth Road': 'WWR',
	Wanstead: 'WAN',
	'Wantead Park': 'WNP',
	Wapping: 'WPE',
	'Warren Street': 'WST',
	'Warwick Avenue': 'WAR',
	Waterloo: 'WLO',
	Watford: 'WAT',
	'Watford High Street': 'WFH',
	'Watford Junction': 'WTJ',
	'Wellesley Road': 'WLR',
	'Wembley Central': 'WEM',
	'Wembley Park': 'WPK',
	'Westbourne Park': 'WBP',
	'West Acton': 'WAC',
	'West Brompton': 'WBT',
	'West Croydon': 'WCY',
	'West Drayton': 'WDT',
	'West Ealing': 'WEL',
	'West Finchley': 'WFY',
	'West Ham': 'WEH',
	'West Hampstead': 'WHD',
	'West Harrow': 'WHR',
	'West India Quay': 'WIQ',
	'West Kensington': 'WKN',
	'West Ruislip': 'WRP',
	'West Silvertown': 'WSN',
	Westferry: 'WES',
	Westminster: 'WMS',
	'White City': 'WCT',
	Whitechapel: 'WCL',
	'White Heart Lane': 'WHL',
	'Willesden Green': 'WLG',
	'Willesden Junction': 'WJN',
	Wimbledon: 'WDN',
	'Wimbledon Park': 'WMP',
	'Wood Green': 'WGN',
	Woodford: 'WFD',
	'Woodgrange Park': 'WGR',
	'Wood Lane': 'WOL',
	Woodside: 'WDS',
	'Woodside Park': 'WSP',
	'Wood Street': 'WOS',
	'Woolwich Arsenal': 'WOA'
};
('use strict');
var _a, _b;
let panInst;
const mapEl = document.getElementById('map');
function storageAvailable(type) {
	var storage;
	try {
		storage = window[type];
		var x = '__storage_test__';
		storage.setItem(x, x);
		storage.removeItem(x);
		return true;
	} catch (e) {
		return (
			e instanceof DOMException &&
			(e.code === 22 ||
				e.code === 1014 ||
				e.name === 'QuotaExceededError' ||
				e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
			storage &&
			storage.length !== 0
		);
	}
}
function loadMapData() {
	var _a, _b;
	try {
		if (!storageAvailable('localStorage')) {
			throw 'No localStorage available';
		}
	} catch (e) {
		alert("Sorry, local storage isn't available in your browser. That means we can't save the data you upload.");
	} finally {
		if (localStorage.getItem('stations') !== null) {
			document.getElementById('js-welcome').style.display = 'none';
			addStnsToMap(usrData('get', 'stations'));
			updateLineSegs();
		} else {
			(_a = document.getElementById('js-footer')) === null || _a === void 0
				? void 0
				: _a.classList.toggle('aside-active');
			(_b = document.getElementById('js-aside')) === null || _b === void 0 ? void 0 : _b.classList.toggle('aside-out');
		}
	}
}
function loadMap() {
	fetch('./assets/map.svg')
		.then((res) => res.text())
		.then((data) => {
			mapEl.innerHTML = data;
			const elem = document.getElementById('status-map');
			setTimeout(() => {
				elem.style.opacity = '1';
			}, 500);
			panInst = panzoom(elem, {
				filterKey: () => {
					return true;
				},
				autoCenter: true,
				maxZoom: 4,
				minZoom: 1,
				initialX: 300,
				initialY: 500,
				initialZoom: 1.5,
				bounds: true,
				boundsPadding: 0.4
			});
			setTimeout(() => {
				loadMapData();
			}, 1500);
		});
}
document.onreadystatechange = (e) => {
	if (document.readyState === 'complete') {
		loadMap();
		const busses = usrData('get', 'bus');
		const noBus = busses.length;
		document.getElementById('js-bus').innerHTML = noBus;
	}
};
window.onkeyup = (e) => {
	var _a;
	if (e.key === '/' || e.keyCode === 191) {
		(_a = document.getElementById('js-stnInput')) === null || _a === void 0 ? void 0 : _a.focus();
	}
};
$('#js-menu').on('click', () => {
	var _a, _b;
	(_a = document.getElementById('js-footer')) === null || _a === void 0 ? void 0 : _a.classList.toggle('aside-active');
	(_b = document.getElementById('js-aside')) === null || _b === void 0 ? void 0 : _b.classList.toggle('aside-out');
});
(_a = document.getElementById('js-stnInput')) === null || _a === void 0
	? void 0
	: _a.addEventListener('focus', (event) => {
			document.getElementById('js-footer').style.bottom = '';
			document.getElementById('js-footer').style.top = '10px';
	  });
(_b = document.getElementById('js-stnInput')) === null || _b === void 0
	? void 0
	: _b.addEventListener('blur', (event) => {
			document.getElementById('js-footer').style.top = '';
			document.getElementById('js-footer').style.bottom = '10px';
	  });
$('#js-stnInput').on('keyup', (e) => {
	if (e.key === 'Enter' || e.keyCode === 13) {
		const stnEl = document.getElementById('js-stnInput');
		if (newStation(stnEl.value)) {
			stnEl.value = '';
		}
	}
});
function newStation(input) {
	addStnsToMap(input);
	usrData('save', 'stations', input);
	updateLineSegs();
	return true;
}
const autoCompleteJS = new autoComplete({
	selector: '#js-stnInput',
	wrapper: true,
	threshold: 2,
	data: {
		src: [
			'Abbey Road',
			'Acton Central',
			'Acton Mainline',
			'Acton Town',
			'Addiscombe',
			'Addington Village',
			'Aldgate',
			'Aldgate East',
			'All Saints',
			'Alperton',
			'Amersham',
			'Ampere Way',
			'Anerley',
			'Angel',
			'Archway',
			'Arena',
			'Arnos Grove',
			'Arsenal',
			'Avenue Road',
			'Baker Street',
			'Balham',
			'Bank',
			'Barbican',
			'Barking',
			'Barkingside',
			'Barons Court',
			'Battersea Power Station',
			'Bayswater',
			'Beckenham Junction',
			'Beckenham Road',
			'Beckton',
			'Beckton Park',
			'Becontree',
			'Beddington Lane',
			'Belgrave Walk',
			'Belsize Park',
			'Bermondsey',
			'Bethnal Green',
			'Birkbeck',
			'Blackfriars',
			'Blackhorse Road',
			'Blackhorse Lane',
			'Blackwall',
			'Bond Street',
			'Borough',
			'Boston Manor',
			'Bounds Green',
			'Bow Church',
			'Bow Road',
			'Brent Cross',
			'Brixton',
			'Brockley',
			'Bromley by Bow',
			'Brondesbury',
			'Brondesbury Park',
			'Brentwood',
			'Bruce Grove',
			'Buckhurst Hill',
			'Burnham',
			'Burnt Oak',
			'Bush Hill Park',
			'Bushey',
			'Caledonian Road',
			'Caledonian Road &amp; Barnsbury',
			'Cambridge Heath',
			'Camden Road',
			'Camden Town',
			'Canada Water',
			'Canary Wharf',
			'Canning Town',
			'Cannon Street',
			'Canonbury',
			'Canons Park',
			'Carpenders Park',
			'Centrale',
			'Chadwell Heath',
			'Chalfont &amp; Latimer',
			'Chalk Farm',
			'Chancery Lane',
			'Charing Cross',
			'Chesham',
			'Chesnut',
			'Chigwell',
			'Chingford',
			'Chiswick Park',
			'Chorleywood',
			'Church Stret',
			'Clapham Common',
			'Clapham High Steet',
			'Clapham Junction',
			'Clapham North',
			'Clapham South',
			'Clapton',
			'Cockfosters',
			'Colindale',
			'Colliers Wood',
			'Coombe Lane',
			'Covent Garden',
			'Crossharbour',
			'Crouch Hill',
			'Croxley',
			'Crystal Palace',
			'Custom House for ExCeL',
			'Cutty Sark for Maritime Greenwich',
			'Cyprus',
			'Dagenham East',
			'Dagenham Heathway',
			'Dalston Junction',
			'Dalston Kingsland',
			'Debden',
			'Denmark Hill',
			'Deptford Bridge',
			'Devons Road',
			'Dollis Hill',
			'Dundonald Road',
			'Ealing Broadway',
			'Ealing Common',
			"Earl's Court",
			'East Acton',
			'East Croydon',
			'East Finchley',
			'East Ham',
			'East India',
			'East Putney',
			'Eastcote',
			'Edgware',
			'Edgware Road (Bakerloo line)',
			'Edgware Road (District, Circle, H&amp;C lines)',
			'Edmonton Green',
			'Elephant &amp; Castle',
			'Elmers End',
			'Elm Park',
			'Elverson Road',
			'Embankment',
			'Emerson Park',
			'Emirates Greenwich Peninsula',
			'Emirates Royal Docks',
			'Enfield Town',
			'Epping',
			'Euston',
			'Euston Square',
			'Fairlop',
			'Farringdon',
			'Fieldway',
			'Finchley Central',
			'Finchley Road',
			'Finchley Road &amp; Frognal',
			'Finsbury Park',
			'Forest Gate',
			'Forest Hill',
			'Fulham Broadway',
			'Gallions Reach',
			'Gants Hill',
			'George Street',
			'Gidea Park',
			'Gloucester Road',
			'Goldhawk Road',
			'Golders Green',
			'Goodge Street',
			'Goodmayes',
			'Gospel Oak',
			'Grange Hill',
			'Gravel Hill',
			'Great Portland Street',
			'Green Park',
			'Greenford',
			'Greenwich',
			'Gunnersbury',
			'Hackney Central',
			'Hackney Downs',
			'Hackney Wick',
			'Haggerston',
			'Hainault',
			'Hammersmith (Circle, H&amp;C lines)',
			'Hammersmith (District, Piccadilly lines)',
			'Hampstead',
			'Hampstead Heath',
			'Hanger Lane',
			'Hanwell',
			'Harlesden',
			'Harringay Green Lanes',
			'Harrington Road',
			'Harold Wood',
			'Harrow &amp; Wealdstone',
			'Harrow on the Hill',
			'Hatch End',
			'Hatton Cross',
			'Hayes &amp; Harrlington',
			'Headstone Lane',
			'Heathrow Terminal 4',
			'Heathrow Terminal 5',
			'Heathrow Terminals 123',
			'Hendon Central',
			'Heron Quays',
			'Highams Park',
			'High Barnet',
			'High Street Kensington',
			'Highbury &amp; Islington',
			'Highgate',
			'Hillingdon',
			'Holborn',
			'Holland Park',
			'Holloway Road',
			'Homerton',
			'Honor Oak Park',
			'Hornchurch',
			'Hounslow Central',
			'Hounslow East',
			'Hounslow West',
			'Hoxton',
			'Hyde Park Corner',
			'Ickenham',
			'Ilford',
			'Imperial Wharf',
			'Island Gardens',
			'Iver',
			'Kennington',
			'Kensal Green',
			'Kensal Rise',
			'Kensington (Olympia)',
			'Kentish Town',
			'Kentish Town West',
			'Kenton',
			'Kew Gardens',
			'Kilburn',
			'Kilburn Park',
			'Kilburn High Road',
			'King George V',
			'King Henrys Drive',
			'Kings Cross St Pancras',
			'Kings Cross St. Pancras',
			'Kingsbury',
			'Knightsbridge',
			'Ladbroke Grove',
			'Lambeth North',
			'Lancaster Gate',
			'Langley',
			'Langdon Park',
			'Latimer Road',
			'Lebanon Road',
			'Leicester Square',
			'Lewisham',
			'Leyton',
			'Leyton Midland Road',
			'Leytonstone',
			'Leytonstone High Road',
			'Limehouse',
			'Liverpool Street',
			'Lloyd Park',
			'London Bridge',
			'London City Airport',
			'London Fields',
			'Loughton',
			'Maida Vale',
			'Maidenhead',
			'Manor House',
			'Manor Park',
			'Mansion House',
			'Marble Arch',
			'Maryland',
			'Marylebone',
			'Merton Park',
			'Mile End',
			'Mill Hill East',
			'Mitcham',
			'Mitcham Junction',
			'Monument',
			'Moor Park',
			'Moorgate',
			'Morden',
			'Morden Road',
			'Mornington Crescent',
			'Mudchute',
			'Neasden',
			'Newbury Park',
			'New Addington',
			'New Cross',
			'New Cross Gate',
			'Nine Elms',
			'North Acton',
			'North Ealing',
			'North Greenwich',
			'North Harrow',
			'North Wembley',
			'Northfields',
			'Northolt',
			'Northwick Park',
			'Northwood',
			'Northwood Hills',
			'Norwood Junction',
			'Notting Hill Gate',
			'Oakwood',
			'Old Street',
			'Osterley',
			'Oval',
			'Oxford Circus',
			'Paddington',
			'Park Royal',
			'Parsons Green',
			'Peckham Rye',
			'Penge West',
			'Perivale',
			'Phipps Bridge',
			'Piccadilly Circus',
			'Pimlico',
			'Pinner',
			'Plaistow',
			'Pontoon Dock',
			'Poplar',
			'Preston Road',
			'Prince Regent',
			'Pudding Mill Lane',
			'Putney Bridge',
			"Queen's Park",
			"Queen's Road Peckham",
			'Queensbury',
			'Queensway',
			'Ravenscourt Park',
			'Rayners Lane',
			'Reading',
			'Rectory Road',
			'Redbridge',
			'Reeves Corner',
			"Regent's Park",
			'Richmond',
			'Rickmansworth',
			'Roding Valley',
			'Rotherhithe',
			'Romford',
			'Royal Albert',
			'Royal Oak',
			'Royal Victoria',
			'Ruislip',
			'Ruislip Gardens',
			'Ruislip Manor',
			'Russell Square',
			'Sandilands',
			'Seven Kings',
			'Seven Sisters',
			'Shadwell',
			'Shenfield',
			"Shepherd's Bush",
			"Shepherd's Bush (Central line)",
			"Shepherd's Bush Market",
			'Shoreditch High Street',
			'Silver Street',
			'Sloane Square',
			'Slough',
			'Snaresbrook',
			'South Acton',
			'South Ealing',
			'South Harrow',
			'South Hampstead',
			'South Kensington',
			'South Kenton',
			'South Tottenham',
			'South Quay',
			'South Ruislip',
			'South Wimbledon',
			'South Woodford',
			'Southall',
			'Southbury',
			'Southfields',
			'Southgate',
			'Southwark',
			"St John's Wood",
			"St Paul's",
			"St James' Park",
			"St James' Street",
			'Stamford Brook',
			'Stamford Hill',
			'Stanmore',
			'Star Lane',
			'Stepney Green',
			'Stockwell',
			'Stoke Newington',
			'Stonebridge Park',
			'Stratford',
			'Stratford High Street',
			'Stratford International',
			'Sudbury Hill',
			'Sudbury Town',
			'Surrey Quays',
			'Swiss Cottage',
			'Sydenham',
			'Taplow',
			'Temple',
			'Theobalds Grove',
			'Therapia Lane',
			'Theydon Bois',
			'Tooting Bec',
			'Tooting Broadway',
			'Tottenham Court Road',
			'Tottenham Hale',
			'Totteridge &amp; Whetstone',
			'Tower Gateway',
			'Tower Hill',
			'Tufnell Park',
			'Turkey Street',
			'Turnham Green',
			'Turnpike Lane',
			'Twyford',
			'Upminster',
			'Upminster Bridge',
			'Upney',
			'Upper Holloway',
			'Upton Park',
			'Uxbridge',
			'Vauxhall',
			'Victoria',
			'Waddon Marsh',
			'Walthamstow Central',
			"Walthamstow Queen's Road",
			'Wandle Park',
			'Wandsworth Road',
			'Wanstead',
			'Wantead Park',
			'Wapping',
			'Warren Street',
			'Warwick Avenue',
			'Waterloo',
			'Watford',
			'Watford High Street',
			'Watford Junction',
			'Wellesley Road',
			'Wembley Central',
			'Wembley Park',
			'Westbourne Park',
			'West Acton',
			'West Brompton',
			'West Croydon',
			'West Drayton',
			'West Ealing',
			'West Finchley',
			'West Ham',
			'West Hampstead',
			'West Harrow',
			'West India Quay',
			'West Kensington',
			'West Ruislip',
			'West Silvertown',
			'Westferry',
			'Westminster',
			'White City',
			'Whitechapel',
			'White Heart Lane',
			'Willesden Green',
			'Willesden Junction',
			'Wimbledon',
			'Wimbledon Park',
			'Wood Green',
			'Woodford',
			'Woodgrange Park',
			'Wood Lane',
			'Woodside',
			'Woodside Park',
			'Wood Street',
			'Woolwich Arsenal'
		],
		cache: true
	},
	resultItem: {highlight: true, id: 'resultItem'},
	resultsList: {
		id: 'resultList',
		maxResults: 3,
		tabSelect: true,
		element: (list, data) => {
			if (!data.results.length) {
				const message = document.createElement('div');
				message.setAttribute('class', 'no_result');
				message.innerHTML = `<span>Found No Results for "${data.query}"</span>`;
				list.prepend(message);
			}
		},
		noResults: true
	},
	events: {
		input: {
			selection: (event) => {
				const selection = event.detail.selection.value;
				autoCompleteJS.input.value = selection;
			}
		}
	}
});
(function (f) {
	if (typeof exports === 'object' && typeof module !== 'undefined') {
		module.exports = f();
	} else if (typeof define === 'function' && define.amd) {
		define([], f);
	} else {
		var g;
		if (typeof window !== 'undefined') {
			g = window;
		} else if (typeof global !== 'undefined') {
			g = global;
		} else if (typeof self !== 'undefined') {
			g = self;
		} else {
			g = this;
		}
		g.panzoom = f();
	}
})(function () {
	var define, module, exports;
	return (function () {
		function r(e, n, t) {
			function o(i, f) {
				if (!n[i]) {
					if (!e[i]) {
						var c = 'function' == typeof require && require;
						if (!f && c) return c(i, !0);
						if (u) return u(i, !0);
						var a = new Error("Cannot find module '" + i + "'");
						throw ((a.code = 'MODULE_NOT_FOUND'), a);
					}
					var p = (n[i] = {exports: {}});
					e[i][0].call(
						p.exports,
						function (r) {
							var n = e[i][1][r];
							return o(n || r);
						},
						p,
						p.exports,
						r,
						e,
						n,
						t
					);
				}
				return n[i].exports;
			}
			for (var u = 'function' == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
			return o;
		}
		return r;
	})()(
		{
			1: [
				function (require, module, exports) {
					'use strict';
					var wheel = require('wheel');
					var animate = require('amator');
					var eventify = require('ngraph.events');
					var kinetic = require('./lib/kinetic.js');
					var createTextSelectionInterceptor = require('./lib/createTextSelectionInterceptor.js');
					var domTextSelectionInterceptor = createTextSelectionInterceptor();
					var fakeTextSelectorInterceptor = createTextSelectionInterceptor(true);
					var Transform = require('./lib/transform.js');
					var makeSvgController = require('./lib/svgController.js');
					var makeDomController = require('./lib/domController.js');
					var defaultZoomSpeed = 1;
					var defaultDoubleTapZoomSpeed = 1.75;
					var doubleTapSpeedInMS = 300;
					module.exports = createPanZoom;
					function createPanZoom(domElement, options) {
						options = options || {};
						var panController = options.controller;
						if (!panController) {
							if (makeSvgController.canAttach(domElement)) {
								panController = makeSvgController(domElement, options);
							} else if (makeDomController.canAttach(domElement)) {
								panController = makeDomController(domElement, options);
							}
						}
						if (!panController) {
							throw new Error('Cannot create panzoom for the current type of dom element');
						}
						var owner = panController.getOwner();
						var storedCTMResult = {x: 0, y: 0};
						var isDirty = false;
						var transform = new Transform();
						if (panController.initTransform) {
							panController.initTransform(transform);
						}
						var filterKey = typeof options.filterKey === 'function' ? options.filterKey : noop;
						var pinchSpeed = typeof options.pinchSpeed === 'number' ? options.pinchSpeed : 1;
						var bounds = options.bounds;
						var maxZoom = typeof options.maxZoom === 'number' ? options.maxZoom : Number.POSITIVE_INFINITY;
						var minZoom = typeof options.minZoom === 'number' ? options.minZoom : 0;
						var boundsPadding = typeof options.boundsPadding === 'number' ? options.boundsPadding : 0.05;
						var zoomDoubleClickSpeed =
							typeof options.zoomDoubleClickSpeed === 'number'
								? options.zoomDoubleClickSpeed
								: defaultDoubleTapZoomSpeed;
						var beforeWheel = options.beforeWheel || noop;
						var beforeMouseDown = options.beforeMouseDown || noop;
						var speed = typeof options.zoomSpeed === 'number' ? options.zoomSpeed : defaultZoomSpeed;
						var transformOrigin = parseTransformOrigin(options.transformOrigin);
						var textSelection = options.enableTextSelection ? fakeTextSelectorInterceptor : domTextSelectionInterceptor;
						validateBounds(bounds);
						if (options.autocenter) {
							autocenter();
						}
						var frameAnimation;
						var lastTouchEndTime = 0;
						var lastSingleFingerOffset;
						var touchInProgress = false;
						var panstartFired = false;
						var mouseX;
						var mouseY;
						var pinchZoomLength;
						var smoothScroll;
						if ('smoothScroll' in options && !options.smoothScroll) {
							smoothScroll = rigidScroll();
						} else {
							smoothScroll = kinetic(getPoint, scroll, options.smoothScroll);
						}
						var moveByAnimation;
						var zoomToAnimation;
						var multiTouch;
						var paused = false;
						listenForEvents();
						var api = {
							dispose: dispose,
							moveBy: internalMoveBy,
							moveTo: moveTo,
							smoothMoveTo: smoothMoveTo,
							centerOn: centerOn,
							zoomTo: publicZoomTo,
							zoomAbs: zoomAbs,
							smoothZoom: smoothZoom,
							smoothZoomAbs: smoothZoomAbs,
							showRectangle: showRectangle,
							pause: pause,
							resume: resume,
							isPaused: isPaused,
							getTransform: getTransformModel,
							getMinZoom: getMinZoom,
							setMinZoom: setMinZoom,
							getMaxZoom: getMaxZoom,
							setMaxZoom: setMaxZoom,
							getTransformOrigin: getTransformOrigin,
							setTransformOrigin: setTransformOrigin,
							getZoomSpeed: getZoomSpeed,
							setZoomSpeed: setZoomSpeed
						};
						eventify(api);
						var initialX = typeof options.initialX === 'number' ? options.initialX : transform.x;
						var initialY = typeof options.initialY === 'number' ? options.initialY : transform.y;
						var initialZoom = typeof options.initialZoom === 'number' ? options.initialZoom : transform.scale;
						if (initialX != transform.x || initialY != transform.y || initialZoom != transform.Scale) {
							zoomAbs(initialX, initialY, initialZoom);
						}
						return api;
						function pause() {
							releaseEvents();
							paused = true;
						}
						function resume() {
							if (paused) {
								listenForEvents();
								paused = false;
							}
						}
						function isPaused() {
							return paused;
						}
						function showRectangle(rect) {
							var clientRect = owner.getBoundingClientRect();
							var size = transformToScreen(clientRect.width, clientRect.height);
							var rectWidth = rect.right - rect.left;
							var rectHeight = rect.bottom - rect.top;
							if (!Number.isFinite(rectWidth) || !Number.isFinite(rectHeight)) {
								throw new Error('Invalid rectangle');
							}
							var dw = size.x / rectWidth;
							var dh = size.y / rectHeight;
							var scale = Math.min(dw, dh);
							transform.x = -(rect.left + rectWidth / 2) * scale + size.x / 2;
							transform.y = -(rect.top + rectHeight / 2) * scale + size.y / 2;
							transform.scale = scale;
						}
						function transformToScreen(x, y) {
							if (panController.getScreenCTM) {
								var parentCTM = panController.getScreenCTM();
								var parentScaleX = parentCTM.a;
								var parentScaleY = parentCTM.d;
								var parentOffsetX = parentCTM.e;
								var parentOffsetY = parentCTM.f;
								storedCTMResult.x = x * parentScaleX - parentOffsetX;
								storedCTMResult.y = y * parentScaleY - parentOffsetY;
							} else {
								storedCTMResult.x = x;
								storedCTMResult.y = y;
							}
							return storedCTMResult;
						}
						function autocenter() {
							var w;
							var h;
							var left = 0;
							var top = 0;
							var sceneBoundingBox = getBoundingBox();
							if (sceneBoundingBox) {
								left = sceneBoundingBox.left;
								top = sceneBoundingBox.top;
								w = sceneBoundingBox.right - sceneBoundingBox.left;
								h = sceneBoundingBox.bottom - sceneBoundingBox.top;
							} else {
								var ownerRect = owner.getBoundingClientRect();
								w = ownerRect.width;
								h = ownerRect.height;
							}
							var bbox = panController.getBBox();
							if (bbox.width === 0 || bbox.height === 0) {
								return;
							}
							var dh = h / bbox.height;
							var dw = w / bbox.width;
							var scale = Math.min(dw, dh);
							transform.x = -(bbox.left + bbox.width / 2) * scale + w / 2 + left;
							transform.y = -(bbox.top + bbox.height / 2) * scale + h / 2 + top;
							transform.scale = scale;
						}
						function getTransformModel() {
							return transform;
						}
						function getMinZoom() {
							return minZoom;
						}
						function setMinZoom(newMinZoom) {
							minZoom = newMinZoom;
						}
						function getMaxZoom() {
							return maxZoom;
						}
						function setMaxZoom(newMaxZoom) {
							maxZoom = newMaxZoom;
						}
						function getTransformOrigin() {
							return transformOrigin;
						}
						function setTransformOrigin(newTransformOrigin) {
							transformOrigin = parseTransformOrigin(newTransformOrigin);
						}
						function getZoomSpeed() {
							return speed;
						}
						function setZoomSpeed(newSpeed) {
							if (!Number.isFinite(newSpeed)) {
								throw new Error('Zoom speed should be a number');
							}
							speed = newSpeed;
						}
						function getPoint() {
							return {x: transform.x, y: transform.y};
						}
						function moveTo(x, y) {
							transform.x = x;
							transform.y = y;
							keepTransformInsideBounds();
							triggerEvent('pan');
							makeDirty();
						}
						function moveBy(dx, dy) {
							moveTo(transform.x + dx, transform.y + dy);
						}
						function keepTransformInsideBounds() {
							var boundingBox = getBoundingBox();
							if (!boundingBox) return;
							var adjusted = false;
							var clientRect = getClientRect();
							var diff = boundingBox.left - clientRect.right;
							if (diff > 0) {
								transform.x += diff;
								adjusted = true;
							}
							diff = boundingBox.right - clientRect.left;
							if (diff < 0) {
								transform.x += diff;
								adjusted = true;
							}
							diff = boundingBox.top - clientRect.bottom;
							if (diff > 0) {
								transform.y += diff;
								adjusted = true;
							}
							diff = boundingBox.bottom - clientRect.top;
							if (diff < 0) {
								transform.y += diff;
								adjusted = true;
							}
							return adjusted;
						}
						function getBoundingBox() {
							if (!bounds) return;
							if (typeof bounds === 'boolean') {
								var ownerRect = owner.getBoundingClientRect();
								var sceneWidth = ownerRect.width;
								var sceneHeight = ownerRect.height;
								return {
									left: sceneWidth * boundsPadding,
									top: sceneHeight * boundsPadding,
									right: sceneWidth * (1 - boundsPadding),
									bottom: sceneHeight * (1 - boundsPadding)
								};
							}
							return bounds;
						}
						function getClientRect() {
							var bbox = panController.getBBox();
							var leftTop = client(bbox.left, bbox.top);
							return {
								left: leftTop.x,
								top: leftTop.y,
								right: bbox.width * transform.scale + leftTop.x,
								bottom: bbox.height * transform.scale + leftTop.y
							};
						}
						function client(x, y) {
							return {x: x * transform.scale + transform.x, y: y * transform.scale + transform.y};
						}
						function makeDirty() {
							isDirty = true;
							frameAnimation = window.requestAnimationFrame(frame);
						}
						function zoomByRatio(clientX, clientY, ratio) {
							if (isNaN(clientX) || isNaN(clientY) || isNaN(ratio)) {
								throw new Error('zoom requires valid numbers');
							}
							var newScale = transform.scale * ratio;
							if (newScale < minZoom) {
								if (transform.scale === minZoom) return;
								ratio = minZoom / transform.scale;
							}
							if (newScale > maxZoom) {
								if (transform.scale === maxZoom) return;
								ratio = maxZoom / transform.scale;
							}
							var size = transformToScreen(clientX, clientY);
							transform.x = size.x - ratio * (size.x - transform.x);
							transform.y = size.y - ratio * (size.y - transform.y);
							if (bounds && boundsPadding === 1 && minZoom === 1) {
								transform.scale *= ratio;
								keepTransformInsideBounds();
							} else {
								var transformAdjusted = keepTransformInsideBounds();
								if (!transformAdjusted) transform.scale *= ratio;
							}
							triggerEvent('zoom');
							makeDirty();
						}
						function zoomAbs(clientX, clientY, zoomLevel) {
							var ratio = zoomLevel / transform.scale;
							zoomByRatio(clientX, clientY, ratio);
						}
						function centerOn(ui) {
							var parent = ui.ownerSVGElement;
							if (!parent) throw new Error('ui element is required to be within the scene');
							var clientRect = ui.getBoundingClientRect();
							var cx = clientRect.left + clientRect.width / 2;
							var cy = clientRect.top + clientRect.height / 2;
							var container = parent.getBoundingClientRect();
							var dx = container.width / 2 - cx;
							var dy = container.height / 2 - cy;
							internalMoveBy(dx, dy, true);
						}
						function smoothMoveTo(x, y) {
							internalMoveBy(x - transform.x, y - transform.y, true);
						}
						function internalMoveBy(dx, dy, smooth) {
							if (!smooth) {
								return moveBy(dx, dy);
							}
							if (moveByAnimation) moveByAnimation.cancel();
							var from = {x: 0, y: 0};
							var to = {x: dx, y: dy};
							var lastX = 0;
							var lastY = 0;
							moveByAnimation = animate(from, to, {
								step: function (v) {
									moveBy(v.x - lastX, v.y - lastY);
									lastX = v.x;
									lastY = v.y;
								}
							});
						}
						function scroll(x, y) {
							cancelZoomAnimation();
							moveTo(x, y);
						}
						function dispose() {
							releaseEvents();
						}
						function listenForEvents() {
							owner.addEventListener('mousedown', onMouseDown, {passive: false});
							owner.addEventListener('dblclick', onDoubleClick, {passive: false});
							owner.addEventListener('touchstart', onTouch, {passive: false});
							owner.addEventListener('keydown', onKeyDown, {passive: false});
							wheel.addWheelListener(owner, onMouseWheel, {passive: false});
							makeDirty();
						}
						function releaseEvents() {
							wheel.removeWheelListener(owner, onMouseWheel);
							owner.removeEventListener('mousedown', onMouseDown);
							owner.removeEventListener('keydown', onKeyDown);
							owner.removeEventListener('dblclick', onDoubleClick);
							owner.removeEventListener('touchstart', onTouch);
							if (frameAnimation) {
								window.cancelAnimationFrame(frameAnimation);
								frameAnimation = 0;
							}
							smoothScroll.cancel();
							releaseDocumentMouse();
							releaseTouches();
							textSelection.release();
							triggerPanEnd();
						}
						function frame() {
							if (isDirty) applyTransform();
						}
						function applyTransform() {
							isDirty = false;
							panController.applyTransform(transform);
							triggerEvent('transform');
							frameAnimation = 0;
						}
						function onKeyDown(e) {
							var x = 0,
								y = 0,
								z = 0;
							if (e.keyCode === 38) {
								y = 1;
							} else if (e.keyCode === 40) {
								y = -1;
							} else if (e.keyCode === 37) {
								x = 1;
							} else if (e.keyCode === 39) {
								x = -1;
							} else if (e.keyCode === 189 || e.keyCode === 109) {
								z = 1;
							} else if (e.keyCode === 187 || e.keyCode === 107) {
								z = -1;
							}
							if (filterKey(e, x, y, z)) {
								return;
							}
							if (x || y) {
								e.preventDefault();
								e.stopPropagation();
								var clientRect = owner.getBoundingClientRect();
								var offset = Math.min(clientRect.width, clientRect.height);
								var moveSpeedRatio = 0.05;
								var dx = offset * moveSpeedRatio * x;
								var dy = offset * moveSpeedRatio * y;
								internalMoveBy(dx, dy);
							}
							if (z) {
								var scaleMultiplier = getScaleMultiplier(z * 100);
								var offset = transformOrigin ? getTransformOriginOffset() : midPoint();
								publicZoomTo(offset.x, offset.y, scaleMultiplier);
							}
						}
						function midPoint() {
							var ownerRect = owner.getBoundingClientRect();
							return {x: ownerRect.width / 2, y: ownerRect.height / 2};
						}
						function onTouch(e) {
							beforeTouch(e);
							if (e.touches.length === 1) {
								return handleSingleFingerTouch(e, e.touches[0]);
							} else if (e.touches.length === 2) {
								pinchZoomLength = getPinchZoomLength(e.touches[0], e.touches[1]);
								multiTouch = true;
								startTouchListenerIfNeeded();
							}
						}
						function beforeTouch(e) {
							if (options.onTouch && !options.onTouch(e)) {
								return;
							}
							e.stopPropagation();
							e.preventDefault();
						}
						function beforeDoubleClick(e) {
							if (options.onDoubleClick && !options.onDoubleClick(e)) {
								return;
							}
							e.preventDefault();
							e.stopPropagation();
						}
						function handleSingleFingerTouch(e) {
							var touch = e.touches[0];
							var offset = getOffsetXY(touch);
							lastSingleFingerOffset = offset;
							var point = transformToScreen(offset.x, offset.y);
							mouseX = point.x;
							mouseY = point.y;
							smoothScroll.cancel();
							startTouchListenerIfNeeded();
						}
						function startTouchListenerIfNeeded() {
							if (touchInProgress) {
								return;
							}
							touchInProgress = true;
							document.addEventListener('touchmove', handleTouchMove);
							document.addEventListener('touchend', handleTouchEnd);
							document.addEventListener('touchcancel', handleTouchEnd);
						}
						function handleTouchMove(e) {
							if (e.touches.length === 1) {
								e.stopPropagation();
								var touch = e.touches[0];
								var offset = getOffsetXY(touch);
								var point = transformToScreen(offset.x, offset.y);
								var dx = point.x - mouseX;
								var dy = point.y - mouseY;
								if (dx !== 0 && dy !== 0) {
									triggerPanStart();
								}
								mouseX = point.x;
								mouseY = point.y;
								internalMoveBy(dx, dy);
							} else if (e.touches.length === 2) {
								multiTouch = true;
								var t1 = e.touches[0];
								var t2 = e.touches[1];
								var currentPinchLength = getPinchZoomLength(t1, t2);
								var scaleMultiplier = 1 + (currentPinchLength / pinchZoomLength - 1) * pinchSpeed;
								var firstTouchPoint = getOffsetXY(t1);
								var secondTouchPoint = getOffsetXY(t2);
								mouseX = (firstTouchPoint.x + secondTouchPoint.x) / 2;
								mouseY = (firstTouchPoint.y + secondTouchPoint.y) / 2;
								if (transformOrigin) {
									var offset = getTransformOriginOffset();
									mouseX = offset.x;
									mouseY = offset.y;
								}
								publicZoomTo(mouseX, mouseY, scaleMultiplier);
								pinchZoomLength = currentPinchLength;
								e.stopPropagation();
								e.preventDefault();
							}
						}
						function handleTouchEnd(e) {
							if (e.touches.length > 0) {
								var offset = getOffsetXY(e.touches[0]);
								var point = transformToScreen(offset.x, offset.y);
								mouseX = point.x;
								mouseY = point.y;
							} else {
								var now = new Date();
								if (now - lastTouchEndTime < doubleTapSpeedInMS) {
									if (transformOrigin) {
										var offset = getTransformOriginOffset();
										smoothZoom(offset.x, offset.y, zoomDoubleClickSpeed);
									} else {
										smoothZoom(lastSingleFingerOffset.x, lastSingleFingerOffset.y, zoomDoubleClickSpeed);
									}
								}
								lastTouchEndTime = now;
								triggerPanEnd();
								releaseTouches();
							}
						}
						function getPinchZoomLength(finger1, finger2) {
							var dx = finger1.clientX - finger2.clientX;
							var dy = finger1.clientY - finger2.clientY;
							return Math.sqrt(dx * dx + dy * dy);
						}
						function onDoubleClick(e) {
							beforeDoubleClick(e);
							var offset = getOffsetXY(e);
							if (transformOrigin) {
								offset = getTransformOriginOffset();
							}
							smoothZoom(offset.x, offset.y, zoomDoubleClickSpeed);
						}
						function onMouseDown(e) {
							if (beforeMouseDown(e)) return;
							if (touchInProgress) {
								e.stopPropagation();
								return false;
							}
							var isLeftButton = (e.button === 1 && window.event !== null) || e.button === 0;
							if (!isLeftButton) return;
							smoothScroll.cancel();
							var offset = getOffsetXY(e);
							var point = transformToScreen(offset.x, offset.y);
							mouseX = point.x;
							mouseY = point.y;
							document.addEventListener('mousemove', onMouseMove);
							document.addEventListener('mouseup', onMouseUp);
							textSelection.capture(e.target || e.srcElement);
							return false;
						}
						function onMouseMove(e) {
							if (touchInProgress) return;
							triggerPanStart();
							var offset = getOffsetXY(e);
							var point = transformToScreen(offset.x, offset.y);
							var dx = point.x - mouseX;
							var dy = point.y - mouseY;
							mouseX = point.x;
							mouseY = point.y;
							internalMoveBy(dx, dy);
						}
						function onMouseUp() {
							textSelection.release();
							triggerPanEnd();
							releaseDocumentMouse();
						}
						function releaseDocumentMouse() {
							document.removeEventListener('mousemove', onMouseMove);
							document.removeEventListener('mouseup', onMouseUp);
							panstartFired = false;
						}
						function releaseTouches() {
							document.removeEventListener('touchmove', handleTouchMove);
							document.removeEventListener('touchend', handleTouchEnd);
							document.removeEventListener('touchcancel', handleTouchEnd);
							panstartFired = false;
							multiTouch = false;
							touchInProgress = false;
						}
						function onMouseWheel(e) {
							if (beforeWheel(e)) return;
							smoothScroll.cancel();
							var delta = e.deltaY;
							if (e.deltaMode > 0) delta *= 100;
							var scaleMultiplier = getScaleMultiplier(delta);
							if (scaleMultiplier !== 1) {
								var offset = transformOrigin ? getTransformOriginOffset() : getOffsetXY(e);
								publicZoomTo(offset.x, offset.y, scaleMultiplier);
								e.preventDefault();
							}
						}
						function getOffsetXY(e) {
							var offsetX, offsetY;
							var ownerRect = owner.getBoundingClientRect();
							offsetX = e.clientX - ownerRect.left;
							offsetY = e.clientY - ownerRect.top;
							return {x: offsetX, y: offsetY};
						}
						function smoothZoom(clientX, clientY, scaleMultiplier) {
							var fromValue = transform.scale;
							var from = {scale: fromValue};
							var to = {scale: scaleMultiplier * fromValue};
							smoothScroll.cancel();
							cancelZoomAnimation();
							zoomToAnimation = animate(from, to, {
								step: function (v) {
									zoomAbs(clientX, clientY, v.scale);
								},
								done: triggerZoomEnd
							});
						}
						function smoothZoomAbs(clientX, clientY, toScaleValue) {
							var fromValue = transform.scale;
							var from = {scale: fromValue};
							var to = {scale: toScaleValue};
							smoothScroll.cancel();
							cancelZoomAnimation();
							zoomToAnimation = animate(from, to, {
								step: function (v) {
									zoomAbs(clientX, clientY, v.scale);
								}
							});
						}
						function getTransformOriginOffset() {
							var ownerRect = owner.getBoundingClientRect();
							return {x: ownerRect.width * transformOrigin.x, y: ownerRect.height * transformOrigin.y};
						}
						function publicZoomTo(clientX, clientY, scaleMultiplier) {
							smoothScroll.cancel();
							cancelZoomAnimation();
							return zoomByRatio(clientX, clientY, scaleMultiplier);
						}
						function cancelZoomAnimation() {
							if (zoomToAnimation) {
								zoomToAnimation.cancel();
								zoomToAnimation = null;
							}
						}
						function getScaleMultiplier(delta) {
							var sign = Math.sign(delta);
							var deltaAdjustedSpeed = Math.min(0.25, Math.abs((speed * delta) / 128));
							return 1 - sign * deltaAdjustedSpeed;
						}
						function triggerPanStart() {
							if (!panstartFired) {
								triggerEvent('panstart');
								panstartFired = true;
								smoothScroll.start();
							}
						}
						function triggerPanEnd() {
							if (panstartFired) {
								if (!multiTouch) smoothScroll.stop();
								triggerEvent('panend');
							}
						}
						function triggerZoomEnd() {
							triggerEvent('zoomend');
						}
						function triggerEvent(name) {
							api.fire(name, api);
						}
					}
					function parseTransformOrigin(options) {
						if (!options) return;
						if (typeof options === 'object') {
							if (!isNumber(options.x) || !isNumber(options.y)) failTransformOrigin(options);
							return options;
						}
						failTransformOrigin();
					}
					function failTransformOrigin(options) {
						console.error(options);
						throw new Error(
							[
								'Cannot parse transform origin.',
								'Some good examples:',
								'  "center center" can be achieved with {x: 0.5, y: 0.5}',
								'  "top center" can be achieved with {x: 0.5, y: 0}',
								'  "bottom right" can be achieved with {x: 1, y: 1}'
							].join('\n')
						);
					}
					function noop() {}
					function validateBounds(bounds) {
						var boundsType = typeof bounds;
						if (boundsType === 'undefined' || boundsType === 'boolean') return;
						var validBounds =
							isNumber(bounds.left) && isNumber(bounds.top) && isNumber(bounds.bottom) && isNumber(bounds.right);
						if (!validBounds)
							throw new Error(
								'Bounds object is not valid. It can be: ' +
									'undefined, boolean (true|false) or an object {left, top, right, bottom}'
							);
					}
					function isNumber(x) {
						return Number.isFinite(x);
					}
					function isNaN(value) {
						if (Number.isNaN) {
							return Number.isNaN(value);
						}
						return value !== value;
					}
					function rigidScroll() {
						return {start: noop, stop: noop, cancel: noop};
					}
					function autoRun() {
						if (typeof document === 'undefined') return;
						var scripts = document.getElementsByTagName('script');
						if (!scripts) return;
						var panzoomScript;
						for (var i = 0; i < scripts.length; ++i) {
							var x = scripts[i];
							if (x.src && x.src.match(/\bpanzoom(\.min)?\.js/)) {
								panzoomScript = x;
								break;
							}
						}
						if (!panzoomScript) return;
						var query = panzoomScript.getAttribute('query');
						if (!query) return;
						var globalName = panzoomScript.getAttribute('name') || 'pz';
						var started = Date.now();
						tryAttach();
						function tryAttach() {
							var el = document.querySelector(query);
							if (!el) {
								var now = Date.now();
								var elapsed = now - started;
								if (elapsed < 2e3) {
									setTimeout(tryAttach, 100);
									return;
								}
								console.error('Cannot find the panzoom element', globalName);
								return;
							}
							var options = collectOptions(panzoomScript);
							console.log(options);
							window[globalName] = createPanZoom(el, options);
						}
						function collectOptions(script) {
							var attrs = script.attributes;
							var options = {};
							for (var i = 0; i < attrs.length; ++i) {
								var attr = attrs[i];
								var nameValue = getPanzoomAttributeNameValue(attr);
								if (nameValue) {
									options[nameValue.name] = nameValue.value;
								}
							}
							return options;
						}
						function getPanzoomAttributeNameValue(attr) {
							if (!attr.name) return;
							var isPanZoomAttribute = attr.name[0] === 'p' && attr.name[1] === 'z' && attr.name[2] === '-';
							if (!isPanZoomAttribute) return;
							var name = attr.name.substr(3);
							var value = JSON.parse(attr.value);
							return {name: name, value: value};
						}
					}
					autoRun();
				},
				{
					'./lib/createTextSelectionInterceptor.js': 2,
					'./lib/domController.js': 3,
					'./lib/kinetic.js': 4,
					'./lib/svgController.js': 5,
					'./lib/transform.js': 6,
					amator: 7,
					'ngraph.events': 9,
					wheel: 10
				}
			],
			2: [
				function (require, module, exports) {
					module.exports = createTextSelectionInterceptor;
					function createTextSelectionInterceptor(useFake) {
						if (useFake) {
							return {capture: noop, release: noop};
						}
						var dragObject;
						var prevSelectStart;
						var prevDragStart;
						var wasCaptured = false;
						return {capture: capture, release: release};
						function capture(domObject) {
							wasCaptured = true;
							prevSelectStart = window.document.onselectstart;
							prevDragStart = window.document.ondragstart;
							window.document.onselectstart = disabled;
							dragObject = domObject;
							dragObject.ondragstart = disabled;
						}
						function release() {
							if (!wasCaptured) return;
							wasCaptured = false;
							window.document.onselectstart = prevSelectStart;
							if (dragObject) dragObject.ondragstart = prevDragStart;
						}
					}
					function disabled(e) {
						e.stopPropagation();
						return false;
					}
					function noop() {}
				},
				{}
			],
			3: [
				function (require, module, exports) {
					module.exports = makeDomController;
					module.exports.canAttach = isDomElement;
					function makeDomController(domElement, options) {
						var elementValid = isDomElement(domElement);
						if (!elementValid) {
							throw new Error('panzoom requires DOM element to be attached to the DOM tree');
						}
						var owner = domElement.parentElement;
						domElement.scrollTop = 0;
						if (!options.disableKeyboardInteraction) {
							owner.setAttribute('tabindex', 0);
						}
						var api = {getBBox: getBBox, getOwner: getOwner, applyTransform: applyTransform};
						return api;
						function getOwner() {
							return owner;
						}
						function getBBox() {
							return {left: 0, top: 0, width: domElement.clientWidth, height: domElement.clientHeight};
						}
						function applyTransform(transform) {
							domElement.style.transformOrigin = '0 0 0';
							domElement.style.transform =
								'matrix(' +
								transform.scale +
								', 0, 0, ' +
								transform.scale +
								', ' +
								transform.x +
								', ' +
								transform.y +
								')';
						}
					}
					function isDomElement(element) {
						return element && element.parentElement && element.style;
					}
				},
				{}
			],
			4: [
				function (require, module, exports) {
					module.exports = kinetic;
					function kinetic(getPoint, scroll, settings) {
						if (typeof settings !== 'object') {
							settings = {};
						}
						var minVelocity = typeof settings.minVelocity === 'number' ? settings.minVelocity : 5;
						var amplitude = typeof settings.amplitude === 'number' ? settings.amplitude : 0.25;
						var cancelAnimationFrame =
							typeof settings.cancelAnimationFrame === 'function'
								? settings.cancelAnimationFrame
								: getCancelAnimationFrame();
						var requestAnimationFrame =
							typeof settings.requestAnimationFrame === 'function'
								? settings.requestAnimationFrame
								: getRequestAnimationFrame();
						var lastPoint;
						var timestamp;
						var timeConstant = 342;
						var ticker;
						var vx, targetX, ax;
						var vy, targetY, ay;
						var raf;
						return {start: start, stop: stop, cancel: dispose};
						function dispose() {
							cancelAnimationFrame(ticker);
							cancelAnimationFrame(raf);
						}
						function start() {
							lastPoint = getPoint();
							ax = ay = vx = vy = 0;
							timestamp = new Date();
							cancelAnimationFrame(ticker);
							cancelAnimationFrame(raf);
							ticker = requestAnimationFrame(track);
						}
						function track() {
							var now = Date.now();
							var elapsed = now - timestamp;
							timestamp = now;
							var currentPoint = getPoint();
							var dx = currentPoint.x - lastPoint.x;
							var dy = currentPoint.y - lastPoint.y;
							lastPoint = currentPoint;
							var dt = 1e3 / (1 + elapsed);
							vx = 0.8 * dx * dt + 0.2 * vx;
							vy = 0.8 * dy * dt + 0.2 * vy;
							ticker = requestAnimationFrame(track);
						}
						function stop() {
							cancelAnimationFrame(ticker);
							cancelAnimationFrame(raf);
							var currentPoint = getPoint();
							targetX = currentPoint.x;
							targetY = currentPoint.y;
							timestamp = Date.now();
							if (vx < -minVelocity || vx > minVelocity) {
								ax = amplitude * vx;
								targetX += ax;
							}
							if (vy < -minVelocity || vy > minVelocity) {
								ay = amplitude * vy;
								targetY += ay;
							}
							raf = requestAnimationFrame(autoScroll);
						}
						function autoScroll() {
							var elapsed = Date.now() - timestamp;
							var moving = false;
							var dx = 0;
							var dy = 0;
							if (ax) {
								dx = -ax * Math.exp(-elapsed / timeConstant);
								if (dx > 0.5 || dx < -0.5) moving = true;
								else dx = ax = 0;
							}
							if (ay) {
								dy = -ay * Math.exp(-elapsed / timeConstant);
								if (dy > 0.5 || dy < -0.5) moving = true;
								else dy = ay = 0;
							}
							if (moving) {
								scroll(targetX + dx, targetY + dy);
								raf = requestAnimationFrame(autoScroll);
							}
						}
					}
					function getCancelAnimationFrame() {
						if (typeof cancelAnimationFrame === 'function') return cancelAnimationFrame;
						return clearTimeout;
					}
					function getRequestAnimationFrame() {
						if (typeof requestAnimationFrame === 'function') return requestAnimationFrame;
						return function (handler) {
							return setTimeout(handler, 16);
						};
					}
				},
				{}
			],
			5: [
				function (require, module, exports) {
					module.exports = makeSvgController;
					module.exports.canAttach = isSVGElement;
					function makeSvgController(svgElement, options) {
						if (!isSVGElement(svgElement)) {
							throw new Error('svg element is required for svg.panzoom to work');
						}
						var owner = svgElement.ownerSVGElement;
						if (!owner) {
							throw new Error(
								'Do not apply panzoom to the root <svg> element. ' +
									'Use its child instead (e.g. <g></g>). ' +
									'As of March 2016 only FireFox supported transform on the root element'
							);
						}
						if (!options.disableKeyboardInteraction) {
							owner.setAttribute('tabindex', 0);
						}
						var api = {
							getBBox: getBBox,
							getScreenCTM: getScreenCTM,
							getOwner: getOwner,
							applyTransform: applyTransform,
							initTransform: initTransform
						};
						return api;
						function getOwner() {
							return owner;
						}
						function getBBox() {
							var bbox = svgElement.getBBox();
							return {left: bbox.x, top: bbox.y, width: bbox.width, height: bbox.height};
						}
						function getScreenCTM() {
							var ctm = owner.getCTM();
							if (!ctm) {
								return owner.getScreenCTM();
							}
							return ctm;
						}
						function initTransform(transform) {
							var screenCTM = svgElement.getCTM();
							if (screenCTM === null) {
								screenCTM = document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGMatrix();
							}
							transform.x = screenCTM.e;
							transform.y = screenCTM.f;
							transform.scale = screenCTM.a;
							owner.removeAttributeNS(null, 'viewBox');
						}
						function applyTransform(transform) {
							svgElement.setAttribute(
								'transform',
								'matrix(' + transform.scale + ' 0 0 ' + transform.scale + ' ' + transform.x + ' ' + transform.y + ')'
							);
						}
					}
					function isSVGElement(element) {
						return element && element.ownerSVGElement && element.getCTM;
					}
				},
				{}
			],
			6: [
				function (require, module, exports) {
					module.exports = Transform;
					function Transform() {
						this.x = 0;
						this.y = 0;
						this.scale = 1;
					}
				},
				{}
			],
			7: [
				function (require, module, exports) {
					var BezierEasing = require('bezier-easing');
					var animations = {
						ease: BezierEasing(0.25, 0.1, 0.25, 1),
						easeIn: BezierEasing(0.42, 0, 1, 1),
						easeOut: BezierEasing(0, 0, 0.58, 1),
						easeInOut: BezierEasing(0.42, 0, 0.58, 1),
						linear: BezierEasing(0, 0, 1, 1)
					};
					module.exports = animate;
					module.exports.makeAggregateRaf = makeAggregateRaf;
					module.exports.sharedScheduler = makeAggregateRaf();
					function animate(source, target, options) {
						var start = Object.create(null);
						var diff = Object.create(null);
						options = options || {};
						var easing = typeof options.easing === 'function' ? options.easing : animations[options.easing];
						if (!easing) {
							if (options.easing) {
								console.warn('Unknown easing function in amator: ' + options.easing);
							}
							easing = animations.ease;
						}
						var step = typeof options.step === 'function' ? options.step : noop;
						var done = typeof options.done === 'function' ? options.done : noop;
						var scheduler = getScheduler(options.scheduler);
						var keys = Object.keys(target);
						keys.forEach(function (key) {
							start[key] = source[key];
							diff[key] = target[key] - source[key];
						});
						var durationInMs = typeof options.duration === 'number' ? options.duration : 400;
						var durationInFrames = Math.max(1, durationInMs * 0.06);
						var previousAnimationId;
						var frame = 0;
						previousAnimationId = scheduler.next(loop);
						return {cancel: cancel};
						function cancel() {
							scheduler.cancel(previousAnimationId);
							previousAnimationId = 0;
						}
						function loop() {
							var t = easing(frame / durationInFrames);
							frame += 1;
							setValues(t);
							if (frame <= durationInFrames) {
								previousAnimationId = scheduler.next(loop);
								step(source);
							} else {
								previousAnimationId = 0;
								setTimeout(function () {
									done(source);
								}, 0);
							}
						}
						function setValues(t) {
							keys.forEach(function (key) {
								source[key] = diff[key] * t + start[key];
							});
						}
					}
					function noop() {}
					function getScheduler(scheduler) {
						if (!scheduler) {
							var canRaf = typeof window !== 'undefined' && window.requestAnimationFrame;
							return canRaf ? rafScheduler() : timeoutScheduler();
						}
						if (typeof scheduler.next !== 'function')
							throw new Error('Scheduler is supposed to have next(cb) function');
						if (typeof scheduler.cancel !== 'function')
							throw new Error('Scheduler is supposed to have cancel(handle) function');
						return scheduler;
					}
					function rafScheduler() {
						return {next: window.requestAnimationFrame.bind(window), cancel: window.cancelAnimationFrame.bind(window)};
					}
					function timeoutScheduler() {
						return {
							next: function (cb) {
								return setTimeout(cb, 1e3 / 60);
							},
							cancel: function (id) {
								return clearTimeout(id);
							}
						};
					}
					function makeAggregateRaf() {
						var frontBuffer = new Set();
						var backBuffer = new Set();
						var frameToken = 0;
						return {next: next, cancel: next, clearAll: clearAll};
						function clearAll() {
							frontBuffer.clear();
							backBuffer.clear();
							cancelAnimationFrame(frameToken);
							frameToken = 0;
						}
						function next(callback) {
							backBuffer.add(callback);
							renderNextFrame();
						}
						function renderNextFrame() {
							if (!frameToken) frameToken = requestAnimationFrame(renderFrame);
						}
						function renderFrame() {
							frameToken = 0;
							var t = backBuffer;
							backBuffer = frontBuffer;
							frontBuffer = t;
							frontBuffer.forEach(function (callback) {
								callback();
							});
							frontBuffer.clear();
						}
						function cancel(callback) {
							backBuffer.delete(callback);
						}
					}
				},
				{'bezier-easing': 8}
			],
			8: [
				function (require, module, exports) {
					var NEWTON_ITERATIONS = 4;
					var NEWTON_MIN_SLOPE = 0.001;
					var SUBDIVISION_PRECISION = 1e-7;
					var SUBDIVISION_MAX_ITERATIONS = 10;
					var kSplineTableSize = 11;
					var kSampleStepSize = 1 / (kSplineTableSize - 1);
					var float32ArraySupported = typeof Float32Array === 'function';
					function A(aA1, aA2) {
						return 1 - 3 * aA2 + 3 * aA1;
					}
					function B(aA1, aA2) {
						return 3 * aA2 - 6 * aA1;
					}
					function C(aA1) {
						return 3 * aA1;
					}
					function calcBezier(aT, aA1, aA2) {
						return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
					}
					function getSlope(aT, aA1, aA2) {
						return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
					}
					function binarySubdivide(aX, aA, aB, mX1, mX2) {
						var currentX,
							currentT,
							i = 0;
						do {
							currentT = aA + (aB - aA) / 2;
							currentX = calcBezier(currentT, mX1, mX2) - aX;
							if (currentX > 0) {
								aB = currentT;
							} else {
								aA = currentT;
							}
						} while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
						return currentT;
					}
					function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
						for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
							var currentSlope = getSlope(aGuessT, mX1, mX2);
							if (currentSlope === 0) {
								return aGuessT;
							}
							var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
							aGuessT -= currentX / currentSlope;
						}
						return aGuessT;
					}
					function LinearEasing(x) {
						return x;
					}
					module.exports = function bezier(mX1, mY1, mX2, mY2) {
						if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
							throw new Error('bezier x values must be in [0, 1] range');
						}
						if (mX1 === mY1 && mX2 === mY2) {
							return LinearEasing;
						}
						var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
						for (var i = 0; i < kSplineTableSize; ++i) {
							sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
						}
						function getTForX(aX) {
							var intervalStart = 0;
							var currentSample = 1;
							var lastSample = kSplineTableSize - 1;
							for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
								intervalStart += kSampleStepSize;
							}
							--currentSample;
							var dist =
								(aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
							var guessForT = intervalStart + dist * kSampleStepSize;
							var initialSlope = getSlope(guessForT, mX1, mX2);
							if (initialSlope >= NEWTON_MIN_SLOPE) {
								return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
							} else if (initialSlope === 0) {
								return guessForT;
							} else {
								return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
							}
						}
						return function BezierEasing(x) {
							if (x === 0) {
								return 0;
							}
							if (x === 1) {
								return 1;
							}
							return calcBezier(getTForX(x), mY1, mY2);
						};
					};
				},
				{}
			],
			9: [
				function (require, module, exports) {
					module.exports = function eventify(subject) {
						validateSubject(subject);
						var eventsStorage = createEventsStorage(subject);
						subject.on = eventsStorage.on;
						subject.off = eventsStorage.off;
						subject.fire = eventsStorage.fire;
						return subject;
					};
					function createEventsStorage(subject) {
						var registeredEvents = Object.create(null);
						return {
							on: function (eventName, callback, ctx) {
								if (typeof callback !== 'function') {
									throw new Error('callback is expected to be a function');
								}
								var handlers = registeredEvents[eventName];
								if (!handlers) {
									handlers = registeredEvents[eventName] = [];
								}
								handlers.push({callback: callback, ctx: ctx});
								return subject;
							},
							off: function (eventName, callback) {
								var wantToRemoveAll = typeof eventName === 'undefined';
								if (wantToRemoveAll) {
									registeredEvents = Object.create(null);
									return subject;
								}
								if (registeredEvents[eventName]) {
									var deleteAllCallbacksForEvent = typeof callback !== 'function';
									if (deleteAllCallbacksForEvent) {
										delete registeredEvents[eventName];
									} else {
										var callbacks = registeredEvents[eventName];
										for (var i = 0; i < callbacks.length; ++i) {
											if (callbacks[i].callback === callback) {
												callbacks.splice(i, 1);
											}
										}
									}
								}
								return subject;
							},
							fire: function (eventName) {
								var callbacks = registeredEvents[eventName];
								if (!callbacks) {
									return subject;
								}
								var fireArguments;
								if (arguments.length > 1) {
									fireArguments = Array.prototype.splice.call(arguments, 1);
								}
								for (var i = 0; i < callbacks.length; ++i) {
									var callbackInfo = callbacks[i];
									callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);
								}
								return subject;
							}
						};
					}
					function validateSubject(subject) {
						if (!subject) {
							throw new Error('Eventify cannot use falsy object as events subject');
						}
						var reservedWords = ['on', 'fire', 'off'];
						for (var i = 0; i < reservedWords.length; ++i) {
							if (subject.hasOwnProperty(reservedWords[i])) {
								throw new Error(
									"Subject cannot be eventified, since it already has property '" + reservedWords[i] + "'"
								);
							}
						}
					}
				},
				{}
			],
			10: [
				function (require, module, exports) {
					module.exports = addWheelListener;
					module.exports.addWheelListener = addWheelListener;
					module.exports.removeWheelListener = removeWheelListener;
					function addWheelListener(element, listener, useCapture) {
						element.addEventListener('wheel', listener, useCapture);
					}
					function removeWheelListener(element, listener, useCapture) {
						element.removeEventListener('wheel', listener, useCapture);
					}
				},
				{}
			]
		},
		{},
		[1]
	)(1);
});
('use strict');
function usrData(func, type, data = []) {
	if (func === 'get') {
		if (localStorage.getItem(type) != null && localStorage.getItem(type) != '[]') {
			return JSON.parse(localStorage.getItem(type));
		} else {
			return [];
		}
	} else if (func === 'save') {
		let current = JSON.parse(localStorage.getItem(type)) ? JSON.parse(localStorage.getItem(type)) : [];
		let newData = [];
		if (typeof data === 'string') {
			newData.push(data);
		} else {
			newData.push(...data);
		}
		current.push(...newData);
		let unique = current.filter((c, i) => {
			return current.indexOf(c) === i;
		});
		localStorage.setItem(type, JSON.stringify(unique));
	} else {
		throw "Func param only accepts 'get' or 'save'";
	}
}
function findVisCodes(arr) {
	const stnArr = [...arr];
	let visArr = [];
	for (const stn of stnArr) {
		visArr.push(stations[stn]);
	}
	return visArr;
}
function addStnsToMap(stns) {
	let s = [];
	if (typeof stns === 'string') {
		s.push(stns);
	} else {
		s.push(...stns);
	}
	s.sort();
	s.forEach((v) => {
		$(`[id*="${stations[v]}-dash"]`).addClass('visible');
		$(`[id*="${stations[v]}-label"]`).addClass('visible');
		$(`[id*="IC_${stations[v]}"]`).addClass('visible');
	});
}
function updateLineSegs() {
	let stnCodes = findVisCodes(usrData('get', 'stations'));
	let data = {
		bakerloo: 0,
		central: 0,
		piccadilly: 0,
		jubilee: 0,
		metropolitan: 0,
		victoria: 0,
		northern: 0,
		circle: 0,
		'hammersmith-city': 0,
		district: 0,
		elizabeth: 0,
		overground: 0,
		'waterloo-city': 0,
		'cable-car': 0,
		dlr: 0,
		OSI: 0
	};
	for (const l in lines) {
		const lineObj = lines[l];
		if (lineObj['branch']) {
			function top() {
				let active = false;
				lineObj['top'].forEach((a) => {
					a.forEach((s) => {
						if (stnCodes.includes(s)) {
							active = true;
						} else {
						}
					});
				});
				return active;
			}
			function bottom() {
				let active = false;
				lineObj['bottom'].forEach((a) => {
					a.forEach((s) => {
						if (stnCodes.includes(s)) {
							active = true;
						} else {
						}
					});
				});
				return active;
			}
			function complete(top, bottom) {
				if (top && bottom) {
					let total = 0;
					lineObj['top'].forEach((e) => {
						let first = 100;
						e.forEach((a) => {
							const index = e.indexOf(a);
							if (stnCodes.includes(a)) {
								total++;
								if (index <= first) {
									first = index;
								}
							}
						});
						for (let i = first; i < e.length; i++) {
							$(`#lul-${lineObj['line']}_${e[i]}-${e[i + 1]}`).addClass('visible');
						}
					});
					lineObj['bottom'].forEach((e) => {
						let last = 0;
						e.forEach((a) => {
							const index = e.indexOf(a);
							if (stnCodes.includes(a)) {
								total++;
								if (index >= last) {
									last = index;
								}
							}
						});
						for (let i = 0; i < last; i++) {
							$(`#lul-${lineObj['line']}_${e[i]}-${e[i + 1]}`).addClass('visible');
						}
					});
					data[lineObj['line']] = data[lineObj['line']] + total;
				} else if (top) {
					let total = 0;
					lineObj['top'].forEach((e) => {
						let first = 100,
							last = 0;
						e.forEach((a) => {
							const index = e.indexOf(a);
							if (stnCodes.includes(a)) {
								total++;
								if (index <= first) {
									first = index;
								} else if (index >= last) {
									last = index;
								} else {
								}
							}
						});
						for (let i = first; i < last; i++) {
							$(`#lul-${lineObj['line']}_${e[i]}-${e[i + 1]}`).addClass('visible');
						}
					});
					data[lineObj['line']] = data[lineObj['line']] + total;
				} else if (bottom) {
					let total = 0;
					lineObj['bottom'].forEach((e) => {
						let first = 100,
							last = 0;
						e.forEach((a) => {
							const index = e.indexOf(a);
							if (stnCodes.includes(a)) {
								total++;
								if (index <= first) {
									first = index;
								} else if (index >= last) {
									last = index;
								} else {
								}
							}
						});
						for (let i = first; i < last; i++) {
							$(`#lul-${lineObj['line']}_${e[i]}-${e[i + 1]}`).addClass('visible');
						}
					});
					data[lineObj['line']] = data[lineObj['line']] + total;
				}
			}
			complete(top(), bottom());
		} else {
			const lineArr = lineObj['stations'];
			let first = 100,
				last = 0,
				total = 0;
			lineArr.forEach((a) => {
				const index = lineArr.indexOf(a);
				if (stnCodes.includes(a)) {
					total++;
					if (index < first) {
						first = index;
					} else if (index > last) {
						last = index;
					} else {
					}
				}
			});
			for (let i = first; i < last; i++) {
				$(`#lul-${lineObj['line']}_${lineArr[i]}-${lineArr[i + 1]}`).addClass('visible');
			}
			data[lineObj['line']] = data[lineObj['line']] + total;
		}
	}
	updateStats(data);
}
function updateStats(data) {
	const totals = {
		bakerloo: 25,
		central: 49,
		piccadilly: 53,
		jubilee: 27,
		metropolitan: 34,
		victoria: 16,
		northern: 52,
		circle: 36,
		'hammersmith-city': 29,
		district: 60,
		elizabeth: 32,
		overground: 112,
		'waterloo-city': 2,
		'cable-car': 2,
		dlr: 45,
		tram: 39
	};
	for (const l in totals) {
		let percent, visited;
		if (data[l] === NaN) {
			$(`progress#${l}`).attr('value', 0);
		} else {
			const total = totals[l];
			visited = data[l];
			percent = Math.floor((visited / total) * 100);
			console.log(l, percent);
		}
		$(`progress#${l}`).attr('value', percent);
	}
}
function readFile(file) {
	const reader = new FileReader();
	reader.readAsText(file, 'UTF-8');
	reader.onload = (evt) => {
		const fileString = evt.target.result;
		const CSVarr = CSVtoArray(fileString);
		loadData(CSVarr);
	};
	reader.onerror = (err) => {
		console.error(err);
	};
}
function loadData(arr) {
	let stations = [],
		busses = [];
	for (const a in arr) {
		const journey = arr[a][3];
		if (journey == undefined) continue;
		if (journey.toLowerCase().indexOf('bus') !== -1) {
			const bus = journey.split('route ')[1];
			if (!busses.includes(bus)) {
				busses.push(bus);
			}
		} else if (journey.toLowerCase().indexOf(' to ') !== -1) {
			const j = journey.split(' to ');
			const s = j.map((d) => {
				const regEx = /( \[.*\])|( DLR)|( tram stop)|(\[No touch-out\])/;
				return d.replace(regEx, '');
			});
			for (const i in s) {
				if (!stations.includes(s[i])) {
					stations.push(s[i]);
				}
			}
		}
	}
	try {
		usrData('save', 'stations', stations);
		usrData('save', 'bus', busses);
	} catch (e) {
		console.error(`loadData(): ${e}`);
	} finally {
		updateLineSegs();
	}
}
function CSVtoArray(strData, strDelimiter = ',') {
	strDelimiter = strDelimiter || ',';
	var objPattern = new RegExp(
		'(\\' + strDelimiter + '|\\r?\\n|\\r|^)' + '(?:"([^"]*(?:""[^"]*)*)"|' + '([^"\\' + strDelimiter + '\\r\\n]*))',
		'gi'
	);
	var arrData = [[]];
	var arrMatches = null;
	while ((arrMatches = objPattern.exec(strData))) {
		var strMatchedDelimiter = arrMatches[1];
		if (strMatchedDelimiter.length && strMatchedDelimiter != strDelimiter) {
			arrData.push([]);
		}
		if (arrMatches[2]) {
			var strMatchedValue = arrMatches[2].replace(new RegExp('""', 'g'), '"');
		} else {
			var strMatchedValue = arrMatches[3];
		}
		arrData[arrData.length - 1].push(strMatchedValue);
	}
	return arrData;
}
function dragOverHandler(e) {
	e.preventDefault();
	$('body').toggleClass('dragOver');
}
function dropHandler(e) {
	e.preventDefault();
	$('body').toggleClass('dragOver');
	const file = e.dataTransfer.items[0].getAsFile();
	readFile(file);
}
function uploadHandler(e) {
	$('#fileSelect').click();
	$('#fileSelect').on('change', () => {
		const fileEl = document.getElementById('fileSelect');
		const file = fileEl === null || fileEl === void 0 ? void 0 : fileEl.files[0];
		readFile(file);
	});
}
